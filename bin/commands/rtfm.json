[
	{
		"keys": ["501408700142059520", "661958918636830720", "heaps"],
		"content": "Heaps is low-level flexible engine made essentially in-house by ShiroGames, and features are implemented when needed. It's open source, but not community oriented. It's not for people who don't know how to work with a low-level engine, especially not for people who only used gamemaker/unity/ue/godot or any other engine that is extremely reliant on its editor. People who stick with Heaps are mainly ones who want more control over the internals, and they know how to build whatever they want on it. People without such experience 9 out of 10 times would have a really hard time with Heaps.\n\nSee the *Unofficial FAQ* here: <https://gist.github.com/Yanrishatum/ae3725a9e2b45e0766c065e573ed1f24>\n__Check the pins for more content!__"
	},
	{
		"keys": ["165234904815239168", "flixel", "haxeflixel", "hf"],
		"content": "HaxeFlixel has its roots in the original ActionScript 3 version of Flixel, created by Adam “Atomic” Saltsman. It was started by Alexander Hohlov in 2011, initially as a straightforward Haxe port of the AS3 codebase and Richard Davey's Flixel Power Tools.\n\nThanks to the efforts of the core team as well as over 100 contributors, today's version of HaxeFlixel far surpasses the capabilities of the original. Not only has the core engine seen many substantial improvements and new features, there is also a far richer ecosystem with additional libaries and over 80 demo projects to learn from."
	},
	{
		"keys": ["565569107701923852", "haxe-ui", "haxeui", "haxeui"],
		"content": "HaxeUI allows the creation of multi-platform, multi-framework user interfaces (including native ones) that can be built using normal haxe code as well as using a markup language like XML. \nFor more info a getting started guides see: http://haxeui.org/getting-started/"
	},
	{
		"keys": ["1200065966445449286", "reflaxe"],
		"content": "Reflaxe is a framework for creating Haxe langauage targets using macros. All you need to worry about is converting from Haxe's typed AST to your desired programming language. Reflaxe handles organizing the input AST, reading user configuration, and generating the output file(s), while also providing various configuration options and helper functions for Haxe target developers.\n\nFirst install the library:\n```\nhaxelib git reflaxe https://github.com/SomeRanDev/reflaxe.git\n```\nNext generate a project in your desired directory:\n```\nhaxelib run reflaxe new\n```\nModify the compiler class, then run tests using:\n```cd reflaxe_<langname>\nhaxelib run reflaxe test\n```\nGithub: <https://github.com/SomeRanDev/reflaxe>\nAPI: <https://somerandev.github.io/reflaxe/>\n\n__Check the pins for important info!__"
	}
]
