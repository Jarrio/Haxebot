{
	"h": {
		"arcade.Body": {
			"name": "Body",
			"path": "arcade.Body",
			"description": "@photonstorm.com&gt;\n @copyright    2016 Photon Storm Ltd.\n @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/Body.html"
		},
		"arcade.Collidable": {
			"name": "Collidable",
			"path": "arcade.Collidable",
			"description": "Any class implementing this interface can be used on World.collide()",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/Collidable.html"
		},
		"arcade.Extensions": {
			"name": "Extensions",
			"path": "arcade.Extensions",
			"description": "A bunch of static extensions to make life easier.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/Extensions.html"
		},
		"arcade.Group": {
			"name": "Group",
			"path": "arcade.Group",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/Group.html"
		},
		"arcade.Line": {
			"name": "Line",
			"path": "arcade.Line",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/Line.html"
		},
		"arcade.Point": {
			"name": "Point",
			"path": "arcade.Point",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/Point.html"
		},
		"arcade.QuadTree": {
			"name": "QuadTree",
			"path": "arcade.QuadTree",
			"description": "@photonstorm.com&gt;\n@copyright    2016 Photon Storm Ltd.\n@license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/QuadTree.html"
		},
		"arcade.QuadTreePool": {
			"name": "QuadTreePool",
			"path": "arcade.QuadTreePool",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/QuadTreePool.html"
		},
		"arcade.SortBodiesBottomTop": {
			"name": "SortBodiesBottomTop",
			"path": "arcade.SortBodiesBottomTop",
			"description": "SortBodiesBottomTop provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/SortBodiesBottomTop.html"
		},
		"arcade.SortBodiesLeftRight": {
			"name": "SortBodiesLeftRight",
			"path": "arcade.SortBodiesLeftRight",
			"description": "SortBodiesLeftRight provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/SortBodiesLeftRight.html"
		},
		"arcade.SortBodiesRightLeft": {
			"name": "SortBodiesRightLeft",
			"path": "arcade.SortBodiesRightLeft",
			"description": "SortBodiesLeftRight provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/SortBodiesRightLeft.html"
		},
		"arcade.SortBodiesTopBottom": {
			"name": "SortBodiesTopBottom",
			"path": "arcade.SortBodiesTopBottom",
			"description": "SortBodiesTopBottom provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/SortBodiesTopBottom.html"
		},
		"arcade.World": {
			"name": "World",
			"path": "arcade.World",
			"description": "@photonstorm.com&gt;\n @copyright    2016 Photon Storm Ltd.\n @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/arcade/World.html"
		},
		"arcade.Axis": {
			"name": "Axis",
			"path": "arcade.Axis",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/arcade/Axis.html"
		},
		"arcade.Direction": {
			"name": "Direction",
			"path": "arcade.Direction",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/arcade/Direction.html"
		},
		"arcade.SortDirection": {
			"name": "SortDirection",
			"path": "arcade.SortDirection",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/arcade/SortDirection.html"
		},
		"backend.Audio": {
			"name": "Audio",
			"path": "backend.Audio",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Audio.html"
		},
		"backend.AudioHandleImpl": {
			"name": "AudioHandleImpl",
			"path": "backend.AudioHandleImpl",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/AudioHandleImpl.html"
		},
		"backend.AudioResourceImpl": {
			"name": "AudioResourceImpl",
			"path": "backend.AudioResourceImpl",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/AudioResourceImpl.html"
		},
		"backend.AudioSources": {
			"name": "AudioSources",
			"path": "backend.AudioSources",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/AudioSources.html"
		},
		"backend.Backend": {
			"name": "Backend",
			"path": "backend.Backend",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Backend.html"
		},
		"backend.Binaries": {
			"name": "Binaries",
			"path": "backend.Binaries",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Binaries.html"
		},
		"backend.CeramicRenderPass": {
			"name": "CeramicRenderPass",
			"path": "backend.CeramicRenderPass",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/CeramicRenderPass.html"
		},
		"backend.ClayEvents": {
			"name": "ClayEvents",
			"path": "backend.ClayEvents",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/ClayEvents.html"
		},
		"backend.Clipboard": {
			"name": "Clipboard",
			"path": "backend.Clipboard",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Clipboard.html"
		},
		"backend.Draw": {
			"name": "Draw",
			"path": "backend.Draw",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Draw.html"
		},
		"backend.ElectronRunner": {
			"name": "ElectronRunner",
			"path": "backend.ElectronRunner",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/ElectronRunner.html"
		},
		"backend.FieldLookup": {
			"name": "FieldLookup",
			"path": "backend.FieldLookup",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/FieldLookup.html"
		},
		"backend.IO": {
			"name": "IO",
			"path": "backend.IO",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/IO.html"
		},
		"backend.Info": {
			"name": "Info",
			"path": "backend.Info",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Info.html"
		},
		"backend.Input": {
			"name": "Input",
			"path": "backend.Input",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Input.html"
		},
		"backend.MaterialData": {
			"name": "MaterialData",
			"path": "backend.MaterialData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/MaterialData.html"
		},
		"backend.Materials": {
			"name": "Materials",
			"path": "backend.Materials",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Materials.html"
		},
		"backend.Screen": {
			"name": "Screen",
			"path": "backend.Screen",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Screen.html"
		},
		"backend.ShaderImpl": {
			"name": "ShaderImpl",
			"path": "backend.ShaderImpl",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/ShaderImpl.html"
		},
		"backend.Shaders": {
			"name": "Shaders",
			"path": "backend.Shaders",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Shaders.html"
		},
		"backend.TextInput": {
			"name": "TextInput",
			"path": "backend.TextInput",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/TextInput.html"
		},
		"backend.Texts": {
			"name": "Texts",
			"path": "backend.Texts",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Texts.html"
		},
		"backend.TextureImpl": {
			"name": "TextureImpl",
			"path": "backend.TextureImpl",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/TextureImpl.html"
		},
		"backend.Textures": {
			"name": "Textures",
			"path": "backend.Textures",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/backend/Textures.html"
		},
		"backend.BlendModeImpl": {
			"name": "BlendModeImpl",
			"path": "backend.BlendModeImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/backend/BlendModeImpl.html"
		},
		"backend.Float32ArrayImplHeadless": {
			"name": "Float32ArrayImplHeadless",
			"path": "backend.Float32ArrayImplHeadless",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/backend/Float32ArrayImplHeadless.html"
		},
		"backend.Shader": {
			"name": "Shader",
			"path": "backend.Shader",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/backend/Shader.html"
		},
		"backend.StencilState": {
			"name": "StencilState",
			"path": "backend.StencilState",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/backend/StencilState.html"
		},
		"backend.TextureIdClayImpl": {
			"name": "TextureIdClayImpl",
			"path": "backend.TextureIdClayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/backend/TextureIdClayImpl.html"
		},
		"backend.TextureIdImpl": {
			"name": "TextureIdImpl",
			"path": "backend.TextureIdImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/backend/TextureIdImpl.html"
		},
		"backend.UInt8ArrayImplHeadless": {
			"name": "UInt8ArrayImplHeadless",
			"path": "backend.UInt8ArrayImplHeadless",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/backend/UInt8ArrayImplHeadless.html"
		},
		"backend.VisualItem": {
			"name": "VisualItem",
			"path": "backend.VisualItem",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/backend/VisualItem.html"
		},
		"backend.AudioHandle": {
			"name": "AudioHandle",
			"path": "backend.AudioHandle",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/AudioHandle.html"
		},
		"backend.AudioResource": {
			"name": "AudioResource",
			"path": "backend.AudioResource",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/AudioResource.html"
		},
		"backend.BlendMode": {
			"name": "BlendMode",
			"path": "backend.BlendMode",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/BlendMode.html"
		},
		"backend.Float32Array": {
			"name": "Float32Array",
			"path": "backend.Float32Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/Float32Array.html"
		},
		"backend.LoadAudioOptions": {
			"name": "LoadAudioOptions",
			"path": "backend.LoadAudioOptions",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/LoadAudioOptions.html"
		},
		"backend.LoadBinaryOptions": {
			"name": "LoadBinaryOptions",
			"path": "backend.LoadBinaryOptions",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/LoadBinaryOptions.html"
		},
		"backend.LoadShaderOptions": {
			"name": "LoadShaderOptions",
			"path": "backend.LoadShaderOptions",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/LoadShaderOptions.html"
		},
		"backend.LoadTextOptions": {
			"name": "LoadTextOptions",
			"path": "backend.LoadTextOptions",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/LoadTextOptions.html"
		},
		"backend.LoadTextureOptions": {
			"name": "LoadTextureOptions",
			"path": "backend.LoadTextureOptions",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/LoadTextureOptions.html"
		},
		"backend.Texture": {
			"name": "Texture",
			"path": "backend.Texture",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/Texture.html"
		},
		"backend.TextureId": {
			"name": "TextureId",
			"path": "backend.TextureId",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/TextureId.html"
		},
		"backend.UInt16Array": {
			"name": "UInt16Array",
			"path": "backend.UInt16Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/UInt16Array.html"
		},
		"backend.UInt8Array": {
			"name": "UInt8Array",
			"path": "backend.UInt8Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/backend/UInt8Array.html"
		},
		"ceramic.AllApi": {
			"name": "AllApi",
			"path": "ceramic.AllApi",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AllApi.html"
		},
		"ceramic.AntialiasedTriangle": {
			"name": "AntialiasedTriangle",
			"path": "ceramic.AntialiasedTriangle",
			"description": "A variant of Triangle using a bit more vertices to simulate antialiasing (without multisampling)",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AntialiasedTriangle.html"
		},
		"ceramic.App": {
			"name": "App",
			"path": "ceramic.App",
			"description": "App class is the root instance of any ceramic app.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/App.html"
		},
		"ceramic.AppXUpdatesHandler": {
			"name": "AppXUpdatesHandler",
			"path": "ceramic.AppXUpdatesHandler",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AppXUpdatesHandler.html"
		},
		"ceramic.Arc": {
			"name": "Arc",
			"path": "ceramic.Arc",
			"description": "Convenience mesh subclass to draw arc, pie, ring or disc geometry",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Arc.html"
		},
		"ceramic.ArcadeSortGroupBottomTop": {
			"name": "ArcadeSortGroupBottomTop",
			"path": "ceramic.ArcadeSortGroupBottomTop",
			"description": "ArcadeSortGroupBottomTop provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ArcadeSortGroupBottomTop.html"
		},
		"ceramic.ArcadeSortGroupLeftRight": {
			"name": "ArcadeSortGroupLeftRight",
			"path": "ceramic.ArcadeSortGroupLeftRight",
			"description": "ArcadeSortGroupLeftRight provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ArcadeSortGroupLeftRight.html"
		},
		"ceramic.ArcadeSortGroupRightLeft": {
			"name": "ArcadeSortGroupRightLeft",
			"path": "ceramic.ArcadeSortGroupRightLeft",
			"description": "ArcadeSortGroupLeftRight provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ArcadeSortGroupRightLeft.html"
		},
		"ceramic.ArcadeSortGroupTopBottom": {
			"name": "ArcadeSortGroupTopBottom",
			"path": "ceramic.ArcadeSortGroupTopBottom",
			"description": "ArcadeSortGroupTopBottom provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ArcadeSortGroupTopBottom.html"
		},
		"ceramic.ArcadeSystem": {
			"name": "ArcadeSystem",
			"path": "ceramic.ArcadeSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ArcadeSystem.html"
		},
		"ceramic.ArcadeWorld": {
			"name": "ArcadeWorld",
			"path": "ceramic.ArcadeWorld",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ArcadeWorld.html"
		},
		"ceramic.ArrayPool": {
			"name": "ArrayPool",
			"path": "ceramic.ArrayPool",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ArrayPool.html"
		},
		"ceramic.Assert": {
			"name": "Assert",
			"path": "ceramic.Assert",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Assert.html"
		},
		"ceramic.Asset": {
			"name": "Asset",
			"path": "ceramic.Asset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Asset.html"
		},
		"ceramic.AssetPathInfo": {
			"name": "AssetPathInfo",
			"path": "ceramic.AssetPathInfo",
			"description": "Information extracted from a raw asset path",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AssetPathInfo.html"
		},
		"ceramic.Assets": {
			"name": "Assets",
			"path": "ceramic.Assets",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Assets.html"
		},
		"ceramic.Audio": {
			"name": "Audio",
			"path": "ceramic.Audio",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Audio.html"
		},
		"ceramic.AudioMixer": {
			"name": "AudioMixer",
			"path": "ceramic.AudioMixer",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AudioMixer.html"
		},
		"ceramic.AutoCollections": {
			"name": "AutoCollections",
			"path": "ceramic.AutoCollections",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AutoCollections.html"
		},
		"ceramic.AutoTiler": {
			"name": "AutoTiler",
			"path": "ceramic.AutoTiler",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AutoTiler.html"
		},
		"ceramic.BackgroundQueue": {
			"name": "BackgroundQueue",
			"path": "ceramic.BackgroundQueue",
			"description": "An utility to enqueue functions and execute them in bbackground, in a serialized way,\nmeaning it is garanteed that no function in this queue will be run in parallel. An enqueued\nfunction will always be started after every previous function has finished executing.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BackgroundQueue.html"
		},
		"ceramic.BezierEasing": {
			"name": "BezierEasing",
			"path": "ceramic.BezierEasing",
			"description": "Bezier curve easing, ported from https://github.com/gre/bezier-easing\nthen extended to work with both cubic and quadratic settings",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BezierEasing.html"
		},
		"ceramic.BinaryAsset": {
			"name": "BinaryAsset",
			"path": "ceramic.BinaryAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BinaryAsset.html"
		},
		"ceramic.BitmapFont": {
			"name": "BitmapFont",
			"path": "ceramic.BitmapFont",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BitmapFont.html"
		},
		"ceramic.BitmapFontCharacter": {
			"name": "BitmapFontCharacter",
			"path": "ceramic.BitmapFontCharacter",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BitmapFontCharacter.html"
		},
		"ceramic.BitmapFontData": {
			"name": "BitmapFontData",
			"path": "ceramic.BitmapFontData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BitmapFontData.html"
		},
		"ceramic.BitmapFontDistanceFieldData": {
			"name": "BitmapFontDistanceFieldData",
			"path": "ceramic.BitmapFontDistanceFieldData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BitmapFontDistanceFieldData.html"
		},
		"ceramic.BitmapFontParser": {
			"name": "BitmapFontParser",
			"path": "ceramic.BitmapFontParser",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BitmapFontParser.html"
		},
		"ceramic.Border": {
			"name": "Border",
			"path": "ceramic.Border",
			"description": "A rectangle visual that display a border",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Border.html"
		},
		"ceramic.Camera": {
			"name": "Camera",
			"path": "ceramic.Camera",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Camera.html"
		},
		"ceramic.Click": {
			"name": "Click",
			"path": "ceramic.Click",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Click.html"
		},
		"ceramic.Closure": {
			"name": "Closure",
			"path": "ceramic.Closure",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Closure.html"
		},
		"ceramic.CollectionEntry": {
			"name": "CollectionEntry",
			"path": "ceramic.CollectionEntry",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionEntry.html"
		},
		"ceramic.CollectionImpl": {
			"name": "CollectionImpl",
			"path": "ceramic.CollectionImpl",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionImpl.html"
		},
		"ceramic.CollectionUtils": {
			"name": "CollectionUtils",
			"path": "ceramic.CollectionUtils",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionUtils.html"
		},
		"ceramic.CollectionView": {
			"name": "CollectionView",
			"path": "ceramic.CollectionView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionView.html"
		},
		"ceramic.CollectionViewDataSource": {
			"name": "CollectionViewDataSource",
			"path": "ceramic.CollectionViewDataSource",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionViewDataSource.html"
		},
		"ceramic.CollectionViewFlowLayout": {
			"name": "CollectionViewFlowLayout",
			"path": "ceramic.CollectionViewFlowLayout",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionViewFlowLayout.html"
		},
		"ceramic.CollectionViewItemFrame": {
			"name": "CollectionViewItemFrame",
			"path": "ceramic.CollectionViewItemFrame",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionViewItemFrame.html"
		},
		"ceramic.CollectionViewLayout": {
			"name": "CollectionViewLayout",
			"path": "ceramic.CollectionViewLayout",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionViewLayout.html"
		},
		"ceramic.ColumnLayout": {
			"name": "ColumnLayout",
			"path": "ceramic.ColumnLayout",
			"description": "A layout that arranges its children vertically in a single column.\nThis class is a LinearLayout subclass, restricted to its vertical direction.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ColumnLayout.html"
		},
		"ceramic.Component": {
			"name": "Component",
			"path": "ceramic.Component",
			"description": "A Component is and Entity that can be bound to another Entity.\nAny Entity can be used as a Component, given that it implement Component interface.\nA Component must be an Entity subclass.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Component.html"
		},
		"ceramic.ComputeFps": {
			"name": "ComputeFps",
			"path": "ceramic.ComputeFps",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ComputeFps.html"
		},
		"ceramic.ConvertArray": {
			"name": "ConvertArray",
			"path": "ceramic.ConvertArray",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertArray.html"
		},
		"ceramic.ConvertComponentMap": {
			"name": "ConvertComponentMap",
			"path": "ceramic.ConvertComponentMap",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertComponentMap.html"
		},
		"ceramic.ConvertField": {
			"name": "ConvertField",
			"path": "ceramic.ConvertField",
			"description": "Interface to convert basic type T to field type U and vice versa.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertField.html"
		},
		"ceramic.ConvertFont": {
			"name": "ConvertFont",
			"path": "ceramic.ConvertFont",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertFont.html"
		},
		"ceramic.ConvertFragmentData": {
			"name": "ConvertFragmentData",
			"path": "ceramic.ConvertFragmentData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertFragmentData.html"
		},
		"ceramic.ConvertIntBoolMap": {
			"name": "ConvertIntBoolMap",
			"path": "ceramic.ConvertIntBoolMap",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertIntBoolMap.html"
		},
		"ceramic.ConvertMap": {
			"name": "ConvertMap",
			"path": "ceramic.ConvertMap",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertMap.html"
		},
		"ceramic.ConvertSpineData": {
			"name": "ConvertSpineData",
			"path": "ceramic.ConvertSpineData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertSpineData.html"
		},
		"ceramic.ConvertTexture": {
			"name": "ConvertTexture",
			"path": "ceramic.ConvertTexture",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertTexture.html"
		},
		"ceramic.ConvertTilemapData": {
			"name": "ConvertTilemapData",
			"path": "ceramic.ConvertTilemapData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ConvertTilemapData.html"
		},
		"ceramic.Csv": {
			"name": "Csv",
			"path": "ceramic.Csv",
			"description": "Utilities to parse CSV and related",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Csv.html"
		},
		"ceramic.CustomAssetKind": {
			"name": "CustomAssetKind",
			"path": "ceramic.CustomAssetKind",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CustomAssetKind.html"
		},
		"ceramic.DatabaseAsset": {
			"name": "DatabaseAsset",
			"path": "ceramic.DatabaseAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/DatabaseAsset.html"
		},
		"ceramic.DialogsPlugin": {
			"name": "DialogsPlugin",
			"path": "ceramic.DialogsPlugin",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/DialogsPlugin.html"
		},
		"ceramic.DoubleClick": {
			"name": "DoubleClick",
			"path": "ceramic.DoubleClick",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/DoubleClick.html"
		},
		"ceramic.EasingUtils": {
			"name": "EasingUtils",
			"path": "ceramic.EasingUtils",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/EasingUtils.html"
		},
		"ceramic.EditText": {
			"name": "EditText",
			"path": "ceramic.EditText",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/EditText.html"
		},
		"ceramic.Entity": {
			"name": "Entity",
			"path": "ceramic.Entity",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Entity.html"
		},
		"ceramic.Enums": {
			"name": "Enums",
			"path": "ceramic.Enums",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Enums.html"
		},
		"ceramic.Equal": {
			"name": "Equal",
			"path": "ceramic.Equal",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Equal.html"
		},
		"ceramic.Errors": {
			"name": "Errors",
			"path": "ceramic.Errors",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Errors.html"
		},
		"ceramic.Extensions": {
			"name": "Extensions",
			"path": "ceramic.Extensions",
			"description": "A bunch of static extensions to make life easier.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Extensions.html"
		},
		"ceramic.FieldInfo": {
			"name": "FieldInfo",
			"path": "ceramic.FieldInfo",
			"description": "Extract field information from a given class type.\nThis is expected to only work with Entity subclasses marked with @editable, @fieldInfo or @autoFieldInfo\nor classes using FieldInfoMacro.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/FieldInfo.html"
		},
		"ceramic.FileWatcher": {
			"name": "FileWatcher",
			"path": "ceramic.FileWatcher",
			"description": "A file watcher for ceramic compatible with interpret.Watcher.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/FileWatcher.html"
		},
		"ceramic.Files": {
			"name": "Files",
			"path": "ceramic.Files",
			"description": "Filesystem-related utilities. Only work on sys targets and/or nodejs depending on the methods",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Files.html"
		},
		"ceramic.Filter": {
			"name": "Filter",
			"path": "ceramic.Filter",
			"description": "A visuals that displays its children through a filter. A filter draws its children into a RenderTexture\nallowing to process the result through a shader, apply blending or alpha on the final result...",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Filter.html"
		},
		"ceramic.FontAsset": {
			"name": "FontAsset",
			"path": "ceramic.FontAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/FontAsset.html"
		},
		"ceramic.Fragment": {
			"name": "Fragment",
			"path": "ceramic.Fragment",
			"description": "A fragment is a group of visuals rendered from data (.fragment file)",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Fragment.html"
		},
		"ceramic.Fragments": {
			"name": "Fragments",
			"path": "ceramic.Fragments",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Fragments.html"
		},
		"ceramic.FragmentsAsset": {
			"name": "FragmentsAsset",
			"path": "ceramic.FragmentsAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/FragmentsAsset.html"
		},
		"ceramic.GeometryUtils": {
			"name": "GeometryUtils",
			"path": "ceramic.GeometryUtils",
			"description": "Geometry-related utilities.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/GeometryUtils.html"
		},
		"ceramic.GifCapture": {
			"name": "GifCapture",
			"path": "ceramic.GifCapture",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/GifCapture.html"
		},
		"ceramic.GlyphQuad": {
			"name": "GlyphQuad",
			"path": "ceramic.GlyphQuad",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/GlyphQuad.html"
		},
		"ceramic.Group": {
			"name": "Group",
			"path": "ceramic.Group",
			"description": "A group of entities, which is itself an entity.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Group.html"
		},
		"ceramic.HashedString": {
			"name": "HashedString",
			"path": "ceramic.HashedString",
			"description": "An utility to encode strings with hashes, allowing to check their validity on decode.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/HashedString.html"
		},
		"ceramic.ImGuiImplJS": {
			"name": "ImGuiImplJS",
			"path": "ceramic.ImGuiImplJS",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ImGuiImplJS.html"
		},
		"ceramic.ImGuiPlugin": {
			"name": "ImGuiPlugin",
			"path": "ceramic.ImGuiPlugin",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ImGuiPlugin.html"
		},
		"ceramic.ImGuiSystem": {
			"name": "ImGuiSystem",
			"path": "ceramic.ImGuiSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ImGuiSystem.html"
		},
		"ceramic.ImageAsset": {
			"name": "ImageAsset",
			"path": "ceramic.ImageAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ImageAsset.html"
		},
		"ceramic.ImageView": {
			"name": "ImageView",
			"path": "ceramic.ImageView",
			"description": "A view to display and layout images.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ImageView.html"
		},
		"ceramic.Immediate": {
			"name": "Immediate",
			"path": "ceramic.Immediate",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Immediate.html"
		},
		"ceramic.InitSettings": {
			"name": "InitSettings",
			"path": "ceramic.InitSettings",
			"description": "Same as Settings, but for app startup (inside Project.new(settings)).\nRead-only values can still\nbe edited at that stage.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/InitSettings.html"
		},
		"ceramic.Input": {
			"name": "Input",
			"path": "ceramic.Input",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Input.html"
		},
		"ceramic.IntMap": {
			"name": "IntMap",
			"path": "ceramic.IntMap",
			"description": "An object map that uses integers as key.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/IntMap.html"
		},
		"ceramic.Interp": {
			"name": "Interp",
			"path": "ceramic.Interp",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Interp.html"
		},
		"ceramic.Json": {
			"name": "Json",
			"path": "ceramic.Json",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Json.html"
		},
		"ceramic.Key": {
			"name": "Key",
			"path": "ceramic.Key",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Key.html"
		},
		"ceramic.KeyBinding": {
			"name": "KeyBinding",
			"path": "ceramic.KeyBinding",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/KeyBinding.html"
		},
		"ceramic.KeyBindings": {
			"name": "KeyBindings",
			"path": "ceramic.KeyBindings",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/KeyBindings.html"
		},
		"ceramic.Layer": {
			"name": "Layer",
			"path": "ceramic.Layer",
			"description": "Just a regular quad (transparent by default) with a few addition to make it more convenient when used as a layer",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Layer.html"
		},
		"ceramic.LayersLayout": {
			"name": "LayersLayout",
			"path": "ceramic.LayersLayout",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LayersLayout.html"
		},
		"ceramic.Lazy": {
			"name": "Lazy",
			"path": "ceramic.Lazy",
			"description": "Lazy allows to mark any property as lazy.\nLazy properties are initialized only at first access.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Lazy.html"
		},
		"ceramic.Line": {
			"name": "Line",
			"path": "ceramic.Line",
			"description": "Display lines composed of multiple segments, curves...",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Line.html"
		},
		"ceramic.LinearLayout": {
			"name": "LinearLayout",
			"path": "ceramic.LinearLayout",
			"description": "A layout that arranges its children either horizontally\nin a single column or vertically in a single row.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LinearLayout.html"
		},
		"ceramic.LongPress": {
			"name": "LongPress",
			"path": "ceramic.LongPress",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LongPress.html"
		},
		"ceramic.LowRes": {
			"name": "LowRes",
			"path": "ceramic.LowRes",
			"description": "A container to display visuals at low resolution,\nwith the possibility to use antialiasing (supersampling).",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LowRes.html"
		},
		"ceramic.Mesh": {
			"name": "Mesh",
			"path": "ceramic.Mesh",
			"description": "Draw anything composed of triangles/vertices.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Mesh.html"
		},
		"ceramic.MeshExtensions": {
			"name": "MeshExtensions",
			"path": "ceramic.MeshExtensions",
			"description": "Static extension with additional helpers for ceramic.Mesh",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/MeshExtensions.html"
		},
		"ceramic.MeshPool": {
			"name": "MeshPool",
			"path": "ceramic.MeshPool",
			"description": "An utility to reuse meshes at application level.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/MeshPool.html"
		},
		"ceramic.NapeSystem": {
			"name": "NapeSystem",
			"path": "ceramic.NapeSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/NapeSystem.html"
		},
		"ceramic.Ngon": {
			"name": "Ngon",
			"path": "ceramic.Ngon",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Ngon.html"
		},
		"ceramic.ParticleEmitter": {
			"name": "ParticleEmitter",
			"path": "ceramic.ParticleEmitter",
			"description": "A particle emitter.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ParticleEmitter.html"
		},
		"ceramic.ParticleItem": {
			"name": "ParticleItem",
			"path": "ceramic.ParticleItem",
			"description": "A particle item.\nYou should not instanciate this yourself as\nit is managed by a Particles emitter object.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ParticleItem.html"
		},
		"ceramic.Particles": {
			"name": "Particles",
			"path": "ceramic.Particles",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Particles.html"
		},
		"ceramic.Path": {
			"name": "Path",
			"path": "ceramic.Path",
			"description": "This class provides a convenient way of working with paths. It supports the\ncommon path formats:",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Path.html"
		},
		"ceramic.PersistentData": {
			"name": "PersistentData",
			"path": "ceramic.PersistentData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/PersistentData.html"
		},
		"ceramic.PixelArt": {
			"name": "PixelArt",
			"path": "ceramic.PixelArt",
			"description": "A filter configured to display pixel art content.\nUses a shader to get a nicer rendering of upscaled pixel art.\nBetter than NEAREST or LINEAR texture filtering.\n(see https://colececil.io/blog/2017/scaling-pixel-art-without-destroying-it/)",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/PixelArt.html"
		},
		"ceramic.Pixels": {
			"name": "Pixels",
			"path": "ceramic.Pixels",
			"description": "Utilities to manipulate RGBA pixels.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Pixels.html"
		},
		"ceramic.PlatformSpecific": {
			"name": "PlatformSpecific",
			"path": "ceramic.PlatformSpecific",
			"description": "An internal class that encapsulate platform-specific code.\nWe usually want platform-specific code to be located in a backend,\nbut it may happen that sometimes creating a backend interface is overkill.\nThat's where this comes handy.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/PlatformSpecific.html"
		},
		"ceramic.Point": {
			"name": "Point",
			"path": "ceramic.Point",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Point.html"
		},
		"ceramic.Pool": {
			"name": "Pool",
			"path": "ceramic.Pool",
			"description": "A generic object pool utility.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Pool.html"
		},
		"ceramic.PremultiplyAlpha": {
			"name": "PremultiplyAlpha",
			"path": "ceramic.PremultiplyAlpha",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/PremultiplyAlpha.html"
		},
		"ceramic.Quad": {
			"name": "Quad",
			"path": "ceramic.Quad",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Quad.html"
		},
		"ceramic.Rect": {
			"name": "Rect",
			"path": "ceramic.Rect",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Rect.html"
		},
		"ceramic.RenderTexture": {
			"name": "RenderTexture",
			"path": "ceramic.RenderTexture",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/RenderTexture.html"
		},
		"ceramic.Renderer": {
			"name": "Renderer",
			"path": "ceramic.Renderer",
			"description": "An implementation-independant GPU 2D renderer.\nTo be used in pair with a draw backend implementation.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Renderer.html"
		},
		"ceramic.ReusableArray": {
			"name": "ReusableArray",
			"path": "ceramic.ReusableArray",
			"description": "A reusable array to use in places that need a temporary array many times.\nChanging array size only increases the backing array size but never decreases it.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ReusableArray.html"
		},
		"ceramic.RowLayout": {
			"name": "RowLayout",
			"path": "ceramic.RowLayout",
			"description": "A layout that arranges its children horizontally in a single row.\nThis class is a LinearLayout subclass, restricted to its horizontal direction.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/RowLayout.html"
		},
		"ceramic.Runner": {
			"name": "Runner",
			"path": "ceramic.Runner",
			"description": "A simple Haxe class for easily running threads and calling functions on the primary thread.\nfrom https://github.com/underscorediscovery/",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Runner.html"
		},
		"ceramic.RuntimeAssets": {
			"name": "RuntimeAssets",
			"path": "ceramic.RuntimeAssets",
			"description": "Runtime utilities to compute asset lists/names from raw (relative) file list.\nCode is very similar to AssetsMacro, but for runtime execution, with any list of asset.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/RuntimeAssets.html"
		},
		"ceramic.Scene": {
			"name": "Scene",
			"path": "ceramic.Scene",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Scene.html"
		},
		"ceramic.SceneSystem": {
			"name": "SceneSystem",
			"path": "ceramic.SceneSystem",
			"description": "System managing scenes display and lifecycle.\nUse it to structure your app in different scenes.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SceneSystem.html"
		},
		"ceramic.Screen": {
			"name": "Screen",
			"path": "ceramic.Screen",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Screen.html"
		},
		"ceramic.Script": {
			"name": "Script",
			"path": "ceramic.Script",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Script.html"
		},
		"ceramic.ScriptModule": {
			"name": "ScriptModule",
			"path": "ceramic.ScriptModule",
			"description": "For now, just a way to identify a script module as a type, to resolve fields dynamically from scripts.\nMight be extended later to link with \"script converted to haxe compiled code\"",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScriptModule.html"
		},
		"ceramic.ScriptUtils": {
			"name": "ScriptUtils",
			"path": "ceramic.ScriptUtils",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScriptUtils.html"
		},
		"ceramic.ScrollView": {
			"name": "ScrollView",
			"path": "ceramic.ScrollView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScrollView.html"
		},
		"ceramic.Scroller": {
			"name": "Scroller",
			"path": "ceramic.Scroller",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Scroller.html"
		},
		"ceramic.SeedRandom": {
			"name": "SeedRandom",
			"path": "ceramic.SeedRandom",
			"description": "Seeded random number generator to get reproducible sequences of values.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SeedRandom.html"
		},
		"ceramic.SelectText": {
			"name": "SelectText",
			"path": "ceramic.SelectText",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SelectText.html"
		},
		"ceramic.Settings": {
			"name": "Settings",
			"path": "ceramic.Settings",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Settings.html"
		},
		"ceramic.Shader": {
			"name": "Shader",
			"path": "ceramic.Shader",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Shader.html"
		},
		"ceramic.ShaderAsset": {
			"name": "ShaderAsset",
			"path": "ceramic.ShaderAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ShaderAsset.html"
		},
		"ceramic.ShaderAttribute": {
			"name": "ShaderAttribute",
			"path": "ceramic.ShaderAttribute",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ShaderAttribute.html"
		},
		"ceramic.Shape": {
			"name": "Shape",
			"path": "ceramic.Shape",
			"description": "Draw shapes by triangulating vertices automatically, with optional holes in it.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Shape.html"
		},
		"ceramic.Shortcuts": {
			"name": "Shortcuts",
			"path": "ceramic.Shortcuts",
			"description": "Shortcuts adds convenience identifiers to access ceramic app, screen, ...\nUse it by adding import ceramic.Shortcuts.*; in your files.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Shortcuts.html"
		},
		"ceramic.SlotInfo": {
			"name": "SlotInfo",
			"path": "ceramic.SlotInfo",
			"description": "An object to hold every needed info about updating a slot.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SlotInfo.html"
		},
		"ceramic.Slug": {
			"name": "Slug",
			"path": "ceramic.Slug",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Slug.html"
		},
		"ceramic.SlugOptions": {
			"name": "SlugOptions",
			"path": "ceramic.SlugOptions",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SlugOptions.html"
		},
		"ceramic.SortVisuals": {
			"name": "SortVisuals",
			"path": "ceramic.SortVisuals",
			"description": "SortVisuals provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SortVisuals.html"
		},
		"ceramic.SortVisualsByDepth": {
			"name": "SortVisualsByDepth",
			"path": "ceramic.SortVisualsByDepth",
			"description": "SortVisuals provides a stable implementation of merge sort through its sort\nmethod. It should be used instead of Array.sort in cases where the order\nof equal elements has to be retained on all targets.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SortVisualsByDepth.html"
		},
		"ceramic.Sound": {
			"name": "Sound",
			"path": "ceramic.Sound",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Sound.html"
		},
		"ceramic.SoundAsset": {
			"name": "SoundAsset",
			"path": "ceramic.SoundAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SoundAsset.html"
		},
		"ceramic.Spine": {
			"name": "Spine",
			"path": "ceramic.Spine",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Spine.html"
		},
		"ceramic.SpineAsset": {
			"name": "SpineAsset",
			"path": "ceramic.SpineAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineAsset.html"
		},
		"ceramic.SpineBindVisual": {
			"name": "SpineBindVisual",
			"path": "ceramic.SpineBindVisual",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineBindVisual.html"
		},
		"ceramic.SpineBindVisualOptions": {
			"name": "SpineBindVisualOptions",
			"path": "ceramic.SpineBindVisualOptions",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineBindVisualOptions.html"
		},
		"ceramic.SpineBounds": {
			"name": "SpineBounds",
			"path": "ceramic.SpineBounds",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineBounds.html"
		},
		"ceramic.SpineColors": {
			"name": "SpineColors",
			"path": "ceramic.SpineColors",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineColors.html"
		},
		"ceramic.SpineData": {
			"name": "SpineData",
			"path": "ceramic.SpineData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineData.html"
		},
		"ceramic.SpineFile": {
			"name": "SpineFile",
			"path": "ceramic.SpineFile",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineFile.html"
		},
		"ceramic.SpineListener": {
			"name": "SpineListener",
			"path": "ceramic.SpineListener",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineListener.html"
		},
		"ceramic.SpineMontage": {
			"name": "SpineMontage",
			"path": "ceramic.SpineMontage",
			"description": "An utility to group an pre-configure spine animations together as a single montage",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineMontage.html"
		},
		"ceramic.SpineMontageAnimation": {
			"name": "SpineMontageAnimation",
			"path": "ceramic.SpineMontageAnimation",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineMontageAnimation.html"
		},
		"ceramic.SpineMontageDefaults": {
			"name": "SpineMontageDefaults",
			"path": "ceramic.SpineMontageDefaults",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineMontageDefaults.html"
		},
		"ceramic.SpineMontageSettings": {
			"name": "SpineMontageSettings",
			"path": "ceramic.SpineMontageSettings",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineMontageSettings.html"
		},
		"ceramic.SpineMontageSpineSettings": {
			"name": "SpineMontageSpineSettings",
			"path": "ceramic.SpineMontageSpineSettings",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineMontageSpineSettings.html"
		},
		"ceramic.SpinePlugin": {
			"name": "SpinePlugin",
			"path": "ceramic.SpinePlugin",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpinePlugin.html"
		},
		"ceramic.SpineSystem": {
			"name": "SpineSystem",
			"path": "ceramic.SpineSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineSystem.html"
		},
		"ceramic.SpineTextureLoader": {
			"name": "SpineTextureLoader",
			"path": "ceramic.SpineTextureLoader",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpineTextureLoader.html"
		},
		"ceramic.Sprite": {
			"name": "Sprite",
			"path": "ceramic.Sprite",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Sprite.html"
		},
		"ceramic.SpriteSheet": {
			"name": "SpriteSheet",
			"path": "ceramic.SpriteSheet",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpriteSheet.html"
		},
		"ceramic.SpriteSheetAnimation": {
			"name": "SpriteSheetAnimation",
			"path": "ceramic.SpriteSheetAnimation",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpriteSheetAnimation.html"
		},
		"ceramic.SpriteSheetFrame": {
			"name": "SpriteSheetFrame",
			"path": "ceramic.SpriteSheetFrame",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpriteSheetFrame.html"
		},
		"ceramic.SpriteSheetImage": {
			"name": "SpriteSheetImage",
			"path": "ceramic.SpriteSheetImage",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpriteSheetImage.html"
		},
		"ceramic.SpriteSystem": {
			"name": "SpriteSystem",
			"path": "ceramic.SpriteSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SpriteSystem.html"
		},
		"ceramic.State": {
			"name": "State",
			"path": "ceramic.State",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/State.html"
		},
		"ceramic.StateMachine": {
			"name": "StateMachine",
			"path": "ceramic.StateMachine",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/StateMachine.html"
		},
		"ceramic.StateMachineBase": {
			"name": "StateMachineBase",
			"path": "ceramic.StateMachineBase",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/StateMachineBase.html"
		},
		"ceramic.StateMachineComponent": {
			"name": "StateMachineComponent",
			"path": "ceramic.StateMachineComponent",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/StateMachineComponent.html"
		},
		"ceramic.StateMachineImpl": {
			"name": "StateMachineImpl",
			"path": "ceramic.StateMachineImpl",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/StateMachineImpl.html"
		},
		"ceramic.StateMachineSystem": {
			"name": "StateMachineSystem",
			"path": "ceramic.StateMachineSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/StateMachineSystem.html"
		},
		"ceramic.System": {
			"name": "System",
			"path": "ceramic.System",
			"description": "A System is an object assigned to app lifecycle and used to\ndo some work such as dispatching events or manipulating entities.\nSystems can be ordered with order properties",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/System.html"
		},
		"ceramic.Systems": {
			"name": "Systems",
			"path": "ceramic.Systems",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Systems.html"
		},
		"ceramic.Task": {
			"name": "Task",
			"path": "ceramic.Task",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Task.html"
		},
		"ceramic.Tasks": {
			"name": "Tasks",
			"path": "ceramic.Tasks",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Tasks.html"
		},
		"ceramic.Text": {
			"name": "Text",
			"path": "ceramic.Text",
			"description": "A visual to layout and display text.\nWorks with UTF-8 strings.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Text.html"
		},
		"ceramic.TextAsset": {
			"name": "TextAsset",
			"path": "ceramic.TextAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TextAsset.html"
		},
		"ceramic.TextInput": {
			"name": "TextInput",
			"path": "ceramic.TextInput",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TextInput.html"
		},
		"ceramic.TextInputDelegate": {
			"name": "TextInputDelegate",
			"path": "ceramic.TextInputDelegate",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TextInputDelegate.html"
		},
		"ceramic.TextView": {
			"name": "TextView",
			"path": "ceramic.TextView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TextView.html"
		},
		"ceramic.Texture": {
			"name": "Texture",
			"path": "ceramic.Texture",
			"description": "A texture is an image ready to be drawn.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Texture.html"
		},
		"ceramic.TextureTile": {
			"name": "TextureTile",
			"path": "ceramic.TextureTile",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TextureTile.html"
		},
		"ceramic.TextureTilePacker": {
			"name": "TextureTilePacker",
			"path": "ceramic.TextureTilePacker",
			"description": "Incremental texture tile packer that allows to alloc, release and reuse tiles as needed.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TextureTilePacker.html"
		},
		"ceramic.Tilemap": {
			"name": "Tilemap",
			"path": "ceramic.Tilemap",
			"description": "Renders tilemap data.\nNote: only ORTHOGONAL is supported",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Tilemap.html"
		},
		"ceramic.TilemapAsset": {
			"name": "TilemapAsset",
			"path": "ceramic.TilemapAsset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapAsset.html"
		},
		"ceramic.TilemapData": {
			"name": "TilemapData",
			"path": "ceramic.TilemapData",
			"description": "Tilemap data.\nStrongly inspired from Tiled TMX format.\n(https://doc.mapeditor.org/en/stable/reference/tmx-map-format/).",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapData.html"
		},
		"ceramic.TilemapEditor": {
			"name": "TilemapEditor",
			"path": "ceramic.TilemapEditor",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapEditor.html"
		},
		"ceramic.TilemapLayer": {
			"name": "TilemapLayer",
			"path": "ceramic.TilemapLayer",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapLayer.html"
		},
		"ceramic.TilemapLayerData": {
			"name": "TilemapLayerData",
			"path": "ceramic.TilemapLayerData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapLayerData.html"
		},
		"ceramic.TilemapParser": {
			"name": "TilemapParser",
			"path": "ceramic.TilemapParser",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapParser.html"
		},
		"ceramic.TilemapPlugin": {
			"name": "TilemapPlugin",
			"path": "ceramic.TilemapPlugin",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapPlugin.html"
		},
		"ceramic.TilemapQuad": {
			"name": "TilemapQuad",
			"path": "ceramic.TilemapQuad",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapQuad.html"
		},
		"ceramic.Tilemaps": {
			"name": "Tilemaps",
			"path": "ceramic.Tilemaps",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Tilemaps.html"
		},
		"ceramic.Tileset": {
			"name": "Tileset",
			"path": "ceramic.Tileset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Tileset.html"
		},
		"ceramic.TilesetImage": {
			"name": "TilesetImage",
			"path": "ceramic.TilesetImage",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilesetImage.html"
		},
		"ceramic.Timeline": {
			"name": "Timeline",
			"path": "ceramic.Timeline",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Timeline.html"
		},
		"ceramic.TimelineBoolKeyframe": {
			"name": "TimelineBoolKeyframe",
			"path": "ceramic.TimelineBoolKeyframe",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineBoolKeyframe.html"
		},
		"ceramic.TimelineBoolTrack": {
			"name": "TimelineBoolTrack",
			"path": "ceramic.TimelineBoolTrack",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineBoolTrack.html"
		},
		"ceramic.TimelineColorKeyframe": {
			"name": "TimelineColorKeyframe",
			"path": "ceramic.TimelineColorKeyframe",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineColorKeyframe.html"
		},
		"ceramic.TimelineColorTrack": {
			"name": "TimelineColorTrack",
			"path": "ceramic.TimelineColorTrack",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineColorTrack.html"
		},
		"ceramic.TimelineDegreesTrack": {
			"name": "TimelineDegreesTrack",
			"path": "ceramic.TimelineDegreesTrack",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineDegreesTrack.html"
		},
		"ceramic.TimelineFloatArrayKeyframe": {
			"name": "TimelineFloatArrayKeyframe",
			"path": "ceramic.TimelineFloatArrayKeyframe",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineFloatArrayKeyframe.html"
		},
		"ceramic.TimelineFloatArrayTrack": {
			"name": "TimelineFloatArrayTrack",
			"path": "ceramic.TimelineFloatArrayTrack",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineFloatArrayTrack.html"
		},
		"ceramic.TimelineFloatKeyframe": {
			"name": "TimelineFloatKeyframe",
			"path": "ceramic.TimelineFloatKeyframe",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineFloatKeyframe.html"
		},
		"ceramic.TimelineFloatTrack": {
			"name": "TimelineFloatTrack",
			"path": "ceramic.TimelineFloatTrack",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineFloatTrack.html"
		},
		"ceramic.TimelineKeyframe": {
			"name": "TimelineKeyframe",
			"path": "ceramic.TimelineKeyframe",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineKeyframe.html"
		},
		"ceramic.TimelineTrack": {
			"name": "TimelineTrack",
			"path": "ceramic.TimelineTrack",
			"description": "A track meant to be updated by a timeline.\nBase implementation doesn't do much by itself.\nCreate subclasses to implement details",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineTrack.html"
		},
		"ceramic.Timelines": {
			"name": "Timelines",
			"path": "ceramic.Timelines",
			"description": "App-level timeline related events.\nYou'll only need to track these events if you want to add new types of timeline tracks &amp; keyframes\nthat can be created from raw data in Fragment instances.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Timelines.html"
		},
		"ceramic.Timer": {
			"name": "Timer",
			"path": "ceramic.Timer",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Timer.html"
		},
		"ceramic.TimerCallback": {
			"name": "TimerCallback",
			"path": "ceramic.TimerCallback",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimerCallback.html"
		},
		"ceramic.Touch": {
			"name": "Touch",
			"path": "ceramic.Touch",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Touch.html"
		},
		"ceramic.TouchInfo": {
			"name": "TouchInfo",
			"path": "ceramic.TouchInfo",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TouchInfo.html"
		},
		"ceramic.TouchesIterator": {
			"name": "TouchesIterator",
			"path": "ceramic.TouchesIterator",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TouchesIterator.html"
		},
		"ceramic.TrackerBackend": {
			"name": "TrackerBackend",
			"path": "ceramic.TrackerBackend",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TrackerBackend.html"
		},
		"ceramic.Transform": {
			"name": "Transform",
			"path": "ceramic.Transform",
			"description": "Transform holds matrix data to make 2d rotate, translate, scale and skew transformations.\nAngles are in degrees.\nRepresentation:\n| a | c | tx |\n| b | d | ty |\n| 0 | 0 | 1  |",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Transform.html"
		},
		"ceramic.TransformPool": {
			"name": "TransformPool",
			"path": "ceramic.TransformPool",
			"description": "An utility to reuse transform matrix object at application level.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TransformPool.html"
		},
		"ceramic.Triangle": {
			"name": "Triangle",
			"path": "ceramic.Triangle",
			"description": "A simple colored triangle, to fulfill all your triangle-shaped needs.\nThe triangle is facing top and fits exactly in width and height",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Triangle.html"
		},
		"ceramic.Triangulate": {
			"name": "Triangulate",
			"path": "ceramic.Triangulate",
			"description": "An utility to triangulate indices from a set of vertices",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Triangulate.html"
		},
		"ceramic.Tween": {
			"name": "Tween",
			"path": "ceramic.Tween",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Tween.html"
		},
		"ceramic.Utils": {
			"name": "Utils",
			"path": "ceramic.Utils",
			"description": "Various utilities. Some of them are used by ceramic itself or its backends.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Utils.html"
		},
		"ceramic.Value": {
			"name": "Value",
			"path": "ceramic.Value",
			"description": "An object that can hold any value",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Value.html"
		},
		"ceramic.ValueEntry": {
			"name": "ValueEntry",
			"path": "ceramic.ValueEntry",
			"description": "A collection entry that can hold any value",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ValueEntry.html"
		},
		"ceramic.Velocity": {
			"name": "Velocity",
			"path": "ceramic.Velocity",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Velocity.html"
		},
		"ceramic.View": {
			"name": "View",
			"path": "ceramic.View",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/View.html"
		},
		"ceramic.ViewSystem": {
			"name": "ViewSystem",
			"path": "ceramic.ViewSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ViewSystem.html"
		},
		"ceramic.VisibleBounds": {
			"name": "VisibleBounds",
			"path": "ceramic.VisibleBounds",
			"description": "An utility to display visible bounds on any visual",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/VisibleBounds.html"
		},
		"ceramic.Visual": {
			"name": "Visual",
			"path": "ceramic.Visual",
			"description": "Visuals are the building blocks to display things on screen.\nA raw visual doesn't display anything but can have children\nthat can be more specialized visuals like Quad, Mesh or Text etc...",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Visual.html"
		},
		"ceramic.VisualArcadePhysics": {
			"name": "VisualArcadePhysics",
			"path": "ceramic.VisualArcadePhysics",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/VisualArcadePhysics.html"
		},
		"ceramic.VisualNapePhysics": {
			"name": "VisualNapePhysics",
			"path": "ceramic.VisualNapePhysics",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/VisualNapePhysics.html"
		},
		"ceramic.VisualTransition": {
			"name": "VisualTransition",
			"path": "ceramic.VisualTransition",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/VisualTransition.html"
		},
		"ceramic.WatchDirectory": {
			"name": "WatchDirectory",
			"path": "ceramic.WatchDirectory",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/ceramic/WatchDirectory.html"
		},
		"ceramic.AlphaColor": {
			"name": "AlphaColor",
			"path": "ceramic.AlphaColor",
			"description": "RGBA Color stored as integer.\nCan be decomposed to Color/Int (RGB) + Float (A) and\nconstructed from Color/Int (RGB) + Float (A).",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AlphaColor.html"
		},
		"ceramic.AssetId": {
			"name": "AssetId",
			"path": "ceramic.AssetId",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AssetId.html"
		},
		"ceramic.AssetsLoadMethod": {
			"name": "AssetsLoadMethod",
			"path": "ceramic.AssetsLoadMethod",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AssetsLoadMethod.html"
		},
		"ceramic.AssetsScheduleMethod": {
			"name": "AssetsScheduleMethod",
			"path": "ceramic.AssetsScheduleMethod",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AssetsScheduleMethod.html"
		},
		"ceramic.AutoTileKind": {
			"name": "AutoTileKind",
			"path": "ceramic.AutoTileKind",
			"description": "Specifies which kind of auto tiling to use with AutoTiler component",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AutoTileKind.html"
		},
		"ceramic.Blending": {
			"name": "Blending",
			"path": "ceramic.Blending",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Blending.html"
		},
		"ceramic.ChokidarWatchedFileStatus": {
			"name": "ChokidarWatchedFileStatus",
			"path": "ceramic.ChokidarWatchedFileStatus",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ChokidarWatchedFileStatus.html"
		},
		"ceramic.Collection": {
			"name": "Collection",
			"path": "ceramic.Collection",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Collection.html"
		},
		"ceramic.CollectionViewItemPosition": {
			"name": "CollectionViewItemPosition",
			"path": "ceramic.CollectionViewItemPosition",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionViewItemPosition.html"
		},
		"ceramic.Color": {
			"name": "Color",
			"path": "ceramic.Color",
			"description": "Class representing a color, based on Int. Provides a variety of methods for creating and converting colors.",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Color.html"
		},
		"ceramic.DebugRendering": {
			"name": "DebugRendering",
			"path": "ceramic.DebugRendering",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/DebugRendering.html"
		},
		"ceramic.Either": {
			"name": "Either",
			"path": "ceramic.Either",
			"description": "Useful to limit a Dynamic function argument's type to the specified\ntype parameters. This does NOT make the use of Dynamic type-safe in\nany way (the underlying type is still Dynamic and Std.isOfType() checks +\ncasts are necessary).",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Either.html"
		},
		"ceramic.Flags": {
			"name": "Flags",
			"path": "ceramic.Flags",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Flags.html"
		},
		"ceramic.GamepadAxis": {
			"name": "GamepadAxis",
			"path": "ceramic.GamepadAxis",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/GamepadAxis.html"
		},
		"ceramic.GamepadButton": {
			"name": "GamepadButton",
			"path": "ceramic.GamepadButton",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/GamepadButton.html"
		},
		"ceramic.IntBoolMap": {
			"name": "IntBoolMap",
			"path": "ceramic.IntBoolMap",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/IntBoolMap.html"
		},
		"ceramic.IntFloatMap": {
			"name": "IntFloatMap",
			"path": "ceramic.IntFloatMap",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/IntFloatMap.html"
		},
		"ceramic.IntIntMap": {
			"name": "IntIntMap",
			"path": "ceramic.IntIntMap",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/IntIntMap.html"
		},
		"ceramic.KeyCode": {
			"name": "KeyCode",
			"path": "ceramic.KeyCode",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/KeyCode.html"
		},
		"ceramic.MeshColorMapping": {
			"name": "MeshColorMapping",
			"path": "ceramic.MeshColorMapping",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/MeshColorMapping.html"
		},
		"ceramic.MouseButton": {
			"name": "MouseButton",
			"path": "ceramic.MouseButton",
			"description": "A typed (mouse) button id",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/MouseButton.html"
		},
		"ceramic.ReadOnlyArray": {
			"name": "ReadOnlyArray",
			"path": "ceramic.ReadOnlyArray",
			"description": "Copyright (c) 2012-2017 Alexander Gordeyko <axgord@gmail.com>. All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are\n permitted provided that the following conditions are met:\n \n 1. Redistributions of source code must retain the above copyright notice, this list of\n   conditions and the following disclaimer.\n \n 2. Redistributions in binary form must reproduce the above copyright notice, this list\n   of conditions and the following disclaimer in the documentation and/or other materials\n   provided with the distribution.\n \n THIS SOFTWARE IS PROVIDED BY ALEXANDER GORDEYKO AS IS'' AND ANY EXPRESS OR IMPLIED\n WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ALEXANDER GORDEYKO OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</axgord@gmail.com>",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ReadOnlyArray.html"
		},
		"ceramic.ReadOnlyMap": {
			"name": "ReadOnlyMap",
			"path": "ceramic.ReadOnlyMap",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ReadOnlyMap.html"
		},
		"ceramic.ReadOnlyPoint": {
			"name": "ReadOnlyPoint",
			"path": "ceramic.ReadOnlyPoint",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ReadOnlyPoint.html"
		},
		"ceramic.ScanCode": {
			"name": "ScanCode",
			"path": "ceramic.ScanCode",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScanCode.html"
		},
		"ceramic.SceneStatus": {
			"name": "SceneStatus",
			"path": "ceramic.SceneStatus",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SceneStatus.html"
		},
		"ceramic.ScreenOrientation": {
			"name": "ScreenOrientation",
			"path": "ceramic.ScreenOrientation",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScreenOrientation.html"
		},
		"ceramic.SoundPlayer": {
			"name": "SoundPlayer",
			"path": "ceramic.SoundPlayer",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/SoundPlayer.html"
		},
		"ceramic.TilemapTile": {
			"name": "TilemapTile",
			"path": "ceramic.TilemapTile",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapTile.html"
		},
		"ceramic.Touches": {
			"name": "Touches",
			"path": "ceramic.Touches",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Touches.html"
		},
		"ceramic.ViewLayoutMask": {
			"name": "ViewLayoutMask",
			"path": "ceramic.ViewLayoutMask",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ViewLayoutMask.html"
		},
		"ceramic.ViewSize": {
			"name": "ViewSize",
			"path": "ceramic.ViewSize",
			"description": "View size helpers",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ViewSize.html"
		},
		"ceramic.VisualTransitionProperties": {
			"name": "VisualTransitionProperties",
			"path": "ceramic.VisualTransitionProperties",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/ceramic/VisualTransitionProperties.html"
		},
		"ceramic.AssetStatus": {
			"name": "AssetStatus",
			"path": "ceramic.AssetStatus",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AssetStatus.html"
		},
		"ceramic.BorderPosition": {
			"name": "BorderPosition",
			"path": "ceramic.BorderPosition",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BorderPosition.html"
		},
		"ceramic.ChildrenDepth": {
			"name": "ChildrenDepth",
			"path": "ceramic.ChildrenDepth",
			"description": "Control how children depth is sorted.",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ChildrenDepth.html"
		},
		"ceramic.CollectionViewItemsBehavior": {
			"name": "CollectionViewItemsBehavior",
			"path": "ceramic.CollectionViewItemsBehavior",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/CollectionViewItemsBehavior.html"
		},
		"ceramic.Easing": {
			"name": "Easing",
			"path": "ceramic.Easing",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Easing.html"
		},
		"ceramic.ImageViewScaling": {
			"name": "ImageViewScaling",
			"path": "ceramic.ImageViewScaling",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ImageViewScaling.html"
		},
		"ceramic.KeyAcceleratorItem": {
			"name": "KeyAcceleratorItem",
			"path": "ceramic.KeyAcceleratorItem",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/KeyAcceleratorItem.html"
		},
		"ceramic.LayoutAlign": {
			"name": "LayoutAlign",
			"path": "ceramic.LayoutAlign",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LayoutAlign.html"
		},
		"ceramic.LayoutDirection": {
			"name": "LayoutDirection",
			"path": "ceramic.LayoutDirection",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LayoutDirection.html"
		},
		"ceramic.LayoutHorizontalAlign": {
			"name": "LayoutHorizontalAlign",
			"path": "ceramic.LayoutHorizontalAlign",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LayoutHorizontalAlign.html"
		},
		"ceramic.LayoutVerticalAlign": {
			"name": "LayoutVerticalAlign",
			"path": "ceramic.LayoutVerticalAlign",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LayoutVerticalAlign.html"
		},
		"ceramic.ParticlesLaunchMode": {
			"name": "ParticlesLaunchMode",
			"path": "ceramic.ParticlesLaunchMode",
			"description": "How particles should be launched. If CIRCLE, particles will use launchAngle and speed.\nOtherwise, particles will just use velocityX and velocityY.",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ParticlesLaunchMode.html"
		},
		"ceramic.ParticlesStatus": {
			"name": "ParticlesStatus",
			"path": "ceramic.ParticlesStatus",
			"description": "Which status a Particles emitter object has.",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ParticlesStatus.html"
		},
		"ceramic.ScreenScaling": {
			"name": "ScreenScaling",
			"path": "ceramic.ScreenScaling",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScreenScaling.html"
		},
		"ceramic.ScrollDirection": {
			"name": "ScrollDirection",
			"path": "ceramic.ScrollDirection",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScrollDirection.html"
		},
		"ceramic.ScrollerStatus": {
			"name": "ScrollerStatus",
			"path": "ceramic.ScrollerStatus",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScrollerStatus.html"
		},
		"ceramic.TextAlign": {
			"name": "TextAlign",
			"path": "ceramic.TextAlign",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TextAlign.html"
		},
		"ceramic.TextureFilter": {
			"name": "TextureFilter",
			"path": "ceramic.TextureFilter",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TextureFilter.html"
		},
		"ceramic.TilemapOrientation": {
			"name": "TilemapOrientation",
			"path": "ceramic.TilemapOrientation",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapOrientation.html"
		},
		"ceramic.TilemapRenderOrder": {
			"name": "TilemapRenderOrder",
			"path": "ceramic.TilemapRenderOrder",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapRenderOrder.html"
		},
		"ceramic.TilemapStaggerAxis": {
			"name": "TilemapStaggerAxis",
			"path": "ceramic.TilemapStaggerAxis",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapStaggerAxis.html"
		},
		"ceramic.TilemapStaggerIndex": {
			"name": "TilemapStaggerIndex",
			"path": "ceramic.TilemapStaggerIndex",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilemapStaggerIndex.html"
		},
		"ceramic.TilesetGridOrientation": {
			"name": "TilesetGridOrientation",
			"path": "ceramic.TilesetGridOrientation",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TilesetGridOrientation.html"
		},
		"ceramic.TriangulateMethod": {
			"name": "TriangulateMethod",
			"path": "ceramic.TriangulateMethod",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TriangulateMethod.html"
		},
		"ceramic.AssetOptions": {
			"name": "AssetOptions",
			"path": "ceramic.AssetOptions",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/AssetOptions.html"
		},
		"ceramic.BindSlotOptions": {
			"name": "BindSlotOptions",
			"path": "ceramic.BindSlotOptions",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/BindSlotOptions.html"
		},
		"ceramic.Float32Array": {
			"name": "Float32Array",
			"path": "ceramic.Float32Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/Float32Array.html"
		},
		"ceramic.FragmentData": {
			"name": "FragmentData",
			"path": "ceramic.FragmentData",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/FragmentData.html"
		},
		"ceramic.FragmentItem": {
			"name": "FragmentItem",
			"path": "ceramic.FragmentItem",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/FragmentItem.html"
		},
		"ceramic.LineCap": {
			"name": "LineCap",
			"path": "ceramic.LineCap",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LineCap.html"
		},
		"ceramic.LineJoin": {
			"name": "LineJoin",
			"path": "ceramic.LineJoin",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/LineJoin.html"
		},
		"ceramic.ScriptContent": {
			"name": "ScriptContent",
			"path": "ceramic.ScriptContent",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/ScriptContent.html"
		},
		"ceramic.TimelineKeyframeData": {
			"name": "TimelineKeyframeData",
			"path": "ceramic.TimelineKeyframeData",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineKeyframeData.html"
		},
		"ceramic.TimelineTrackData": {
			"name": "TimelineTrackData",
			"path": "ceramic.TimelineTrackData",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/TimelineTrackData.html"
		},
		"ceramic.UInt8Array": {
			"name": "UInt8Array",
			"path": "ceramic.UInt8Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/ceramic/UInt8Array.html"
		},
		"clay.BackgroundQueue": {
			"name": "BackgroundQueue",
			"path": "clay.BackgroundQueue",
			"description": "An utility to enqueue functions and execute them in bbackground, in a serialized way,\nmeaning it is garanteed that no function in this queue will be run in parallel. An enqueued\nfunction will always be started after every previous function has finished executing.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/BackgroundQueue.html"
		},
		"clay.Clay": {
			"name": "Clay",
			"path": "clay.Clay",
			"description": "Clay app",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Clay.html"
		},
		"clay.Config": {
			"name": "Config",
			"path": "clay.Config",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Config.html"
		},
		"clay.Events": {
			"name": "Events",
			"path": "clay.Events",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Events.html"
		},
		"clay.Extensions": {
			"name": "Extensions",
			"path": "clay.Extensions",
			"description": "A bunch of static extensions to make life easier.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Extensions.html"
		},
		"clay.Image": {
			"name": "Image",
			"path": "clay.Image",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Image.html"
		},
		"clay.Immediate": {
			"name": "Immediate",
			"path": "clay.Immediate",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Immediate.html"
		},
		"clay.Input": {
			"name": "Input",
			"path": "clay.Input",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Input.html"
		},
		"clay.Log": {
			"name": "Log",
			"path": "clay.Log",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Log.html"
		},
		"clay.Macros": {
			"name": "Macros",
			"path": "clay.Macros",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Macros.html"
		},
		"clay.ModState": {
			"name": "ModState",
			"path": "clay.ModState",
			"description": "Input modifier state",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/ModState.html"
		},
		"clay.PremultiplyAlpha": {
			"name": "PremultiplyAlpha",
			"path": "clay.PremultiplyAlpha",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/PremultiplyAlpha.html"
		},
		"clay.RenderConfig": {
			"name": "RenderConfig",
			"path": "clay.RenderConfig",
			"description": "Config specific to the rendering context that would be used when creating windows",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/RenderConfig.html"
		},
		"clay.RenderConfigOpenGL": {
			"name": "RenderConfigOpenGL",
			"path": "clay.RenderConfigOpenGL",
			"description": "Config specific to an OpenGL rendering context.\nNote that these are hints to the system,\nyou must always check the values after initializing\nfor what you actually received. The OS/driver decides.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/RenderConfigOpenGL.html"
		},
		"clay.RenderConfigWebGL": {
			"name": "RenderConfigWebGL",
			"path": "clay.RenderConfigWebGL",
			"description": "Config specific to a WebGL rendering context.\nSee: https://www.khronos.org/registry/webgl/specs/latest/1.0/#WEBGLCONTEXTATTRIBUTES",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/RenderConfigWebGL.html"
		},
		"clay.Resource": {
			"name": "Resource",
			"path": "clay.Resource",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Resource.html"
		},
		"clay.Runner": {
			"name": "Runner",
			"path": "clay.Runner",
			"description": "A simple Haxe class for easily running threads and calling functions on the primary thread.\nfrom https://github.com/underscorediscovery/",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Runner.html"
		},
		"clay.Utils": {
			"name": "Utils",
			"path": "clay.Utils",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/Utils.html"
		},
		"clay.WindowConfig": {
			"name": "WindowConfig",
			"path": "clay.WindowConfig",
			"description": "Window configuration information for creating windows",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/WindowConfig.html"
		},
		"clay.AppEventType": {
			"name": "AppEventType",
			"path": "clay.AppEventType",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/AppEventType.html"
		},
		"clay.BlendMode": {
			"name": "BlendMode",
			"path": "clay.BlendMode",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/BlendMode.html"
		},
		"clay.GamepadDeviceEventType": {
			"name": "GamepadDeviceEventType",
			"path": "clay.GamepadDeviceEventType",
			"description": "A gamepad device event type",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/GamepadDeviceEventType.html"
		},
		"clay.KeyCode": {
			"name": "KeyCode",
			"path": "clay.KeyCode",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/KeyCode.html"
		},
		"clay.OpenGLProfile": {
			"name": "OpenGLProfile",
			"path": "clay.OpenGLProfile",
			"description": "A type of OpenGL context profile to request. see RenderConfigOpenGL for info",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/OpenGLProfile.html"
		},
		"clay.ScanCode": {
			"name": "ScanCode",
			"path": "clay.ScanCode",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/ScanCode.html"
		},
		"clay.TextEventType": {
			"name": "TextEventType",
			"path": "clay.TextEventType",
			"description": "A text specific event event type",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/TextEventType.html"
		},
		"clay.TextureDataType": {
			"name": "TextureDataType",
			"path": "clay.TextureDataType",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/TextureDataType.html"
		},
		"clay.TextureFilter": {
			"name": "TextureFilter",
			"path": "clay.TextureFilter",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/TextureFilter.html"
		},
		"clay.TextureFormat": {
			"name": "TextureFormat",
			"path": "clay.TextureFormat",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/TextureFormat.html"
		},
		"clay.TextureType": {
			"name": "TextureType",
			"path": "clay.TextureType",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/TextureType.html"
		},
		"clay.TextureWrap": {
			"name": "TextureWrap",
			"path": "clay.TextureWrap",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/TextureWrap.html"
		},
		"clay.WindowEventType": {
			"name": "WindowEventType",
			"path": "clay.WindowEventType",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/WindowEventType.html"
		},
		"clay.ArrayPool": {
			"name": "ArrayPool",
			"path": "clay.ArrayPool",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/ArrayPool.html"
		},
		"clay.Assets": {
			"name": "Assets",
			"path": "clay.Assets",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/Assets.html"
		},
		"clay.Audio": {
			"name": "Audio",
			"path": "clay.Audio",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/Audio.html"
		},
		"clay.FileHandle": {
			"name": "FileHandle",
			"path": "clay.FileHandle",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/FileHandle.html"
		},
		"clay.FileSeek": {
			"name": "FileSeek",
			"path": "clay.FileSeek",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/FileSeek.html"
		},
		"clay.GpuShader": {
			"name": "GpuShader",
			"path": "clay.GpuShader",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/GpuShader.html"
		},
		"clay.IO": {
			"name": "IO",
			"path": "clay.IO",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/IO.html"
		},
		"clay.IntMap": {
			"name": "IntMap",
			"path": "clay.IntMap",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/IntMap.html"
		},
		"clay.RenderTarget": {
			"name": "RenderTarget",
			"path": "clay.RenderTarget",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/RenderTarget.html"
		},
		"clay.Runtime": {
			"name": "Runtime",
			"path": "clay.Runtime",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/Runtime.html"
		},
		"clay.RuntimeConfig": {
			"name": "RuntimeConfig",
			"path": "clay.RuntimeConfig",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/RuntimeConfig.html"
		},
		"clay.TextureId": {
			"name": "TextureId",
			"path": "clay.TextureId",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/TextureId.html"
		},
		"elements.BaseTextFieldView": {
			"name": "BaseTextFieldView",
			"path": "elements.BaseTextFieldView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/BaseTextFieldView.html"
		},
		"elements.BiBorderedTriangle": {
			"name": "BiBorderedTriangle",
			"path": "elements.BiBorderedTriangle",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/BiBorderedTriangle.html"
		},
		"elements.BooleanFieldView": {
			"name": "BooleanFieldView",
			"path": "elements.BooleanFieldView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/BooleanFieldView.html"
		},
		"elements.Button": {
			"name": "Button",
			"path": "elements.Button",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/Button.html"
		},
		"elements.CellCollectionView": {
			"name": "CellCollectionView",
			"path": "elements.CellCollectionView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/CellCollectionView.html"
		},
		"elements.CellView": {
			"name": "CellView",
			"path": "elements.CellView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/CellView.html"
		},
		"elements.ClickableIconView": {
			"name": "ClickableIconView",
			"path": "elements.ClickableIconView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ClickableIconView.html"
		},
		"elements.ColorFieldView": {
			"name": "ColorFieldView",
			"path": "elements.ColorFieldView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ColorFieldView.html"
		},
		"elements.ColorPickerHSBGradientView": {
			"name": "ColorPickerHSBGradientView",
			"path": "elements.ColorPickerHSBGradientView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ColorPickerHSBGradientView.html"
		},
		"elements.ColorPickerHSBSpectrumView": {
			"name": "ColorPickerHSBSpectrumView",
			"path": "elements.ColorPickerHSBSpectrumView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ColorPickerHSBSpectrumView.html"
		},
		"elements.ColorPickerHSLuvGradientView": {
			"name": "ColorPickerHSLuvGradientView",
			"path": "elements.ColorPickerHSLuvGradientView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ColorPickerHSLuvGradientView.html"
		},
		"elements.ColorPickerHSLuvSpectrumView": {
			"name": "ColorPickerHSLuvSpectrumView",
			"path": "elements.ColorPickerHSLuvSpectrumView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ColorPickerHSLuvSpectrumView.html"
		},
		"elements.ColorPickerPaletteColorView": {
			"name": "ColorPickerPaletteColorView",
			"path": "elements.ColorPickerPaletteColorView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ColorPickerPaletteColorView.html"
		},
		"elements.ColorPickerView": {
			"name": "ColorPickerView",
			"path": "elements.ColorPickerView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ColorPickerView.html"
		},
		"elements.Context": {
			"name": "Context",
			"path": "elements.Context",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/Context.html"
		},
		"elements.CrossX": {
			"name": "CrossX",
			"path": "elements.CrossX",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/CrossX.html"
		},
		"elements.DragDrop": {
			"name": "DragDrop",
			"path": "elements.DragDrop",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/DragDrop.html"
		},
		"elements.EntypoIconView": {
			"name": "EntypoIconView",
			"path": "elements.EntypoIconView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/EntypoIconView.html"
		},
		"elements.FieldSystem": {
			"name": "FieldSystem",
			"path": "elements.FieldSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/FieldSystem.html"
		},
		"elements.FieldView": {
			"name": "FieldView",
			"path": "elements.FieldView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/FieldView.html"
		},
		"elements.FormLayout": {
			"name": "FormLayout",
			"path": "elements.FormLayout",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/FormLayout.html"
		},
		"elements.Im": {
			"name": "Im",
			"path": "elements.Im",
			"description": "API inspired by Dear ImGui,\nbut using ceramic elements UI,\nmaking it work with any ceramic target",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/Im.html"
		},
		"elements.ImRowLayout": {
			"name": "ImRowLayout",
			"path": "elements.ImRowLayout",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ImRowLayout.html"
		},
		"elements.ImSystem": {
			"name": "ImSystem",
			"path": "elements.ImSystem",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ImSystem.html"
		},
		"elements.ItalicText": {
			"name": "ItalicText",
			"path": "elements.ItalicText",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ItalicText.html"
		},
		"elements.LabelView": {
			"name": "LabelView",
			"path": "elements.LabelView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/LabelView.html"
		},
		"elements.LabeledView": {
			"name": "LabeledView",
			"path": "elements.LabeledView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/LabeledView.html"
		},
		"elements.ListView": {
			"name": "ListView",
			"path": "elements.ListView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ListView.html"
		},
		"elements.ListViewDataSource": {
			"name": "ListViewDataSource",
			"path": "elements.ListViewDataSource",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ListViewDataSource.html"
		},
		"elements.PendingChoice": {
			"name": "PendingChoice",
			"path": "elements.PendingChoice",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/PendingChoice.html"
		},
		"elements.RelatedToFieldView": {
			"name": "RelatedToFieldView",
			"path": "elements.RelatedToFieldView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/RelatedToFieldView.html"
		},
		"elements.SanitizeTextField": {
			"name": "SanitizeTextField",
			"path": "elements.SanitizeTextField",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/SanitizeTextField.html"
		},
		"elements.Scrollbar": {
			"name": "Scrollbar",
			"path": "elements.Scrollbar",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/Scrollbar.html"
		},
		"elements.ScrollingLayout": {
			"name": "ScrollingLayout",
			"path": "elements.ScrollingLayout",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/ScrollingLayout.html"
		},
		"elements.SelectFieldView": {
			"name": "SelectFieldView",
			"path": "elements.SelectFieldView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/SelectFieldView.html"
		},
		"elements.SelectListView": {
			"name": "SelectListView",
			"path": "elements.SelectListView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/SelectListView.html"
		},
		"elements.Separator": {
			"name": "Separator",
			"path": "elements.Separator",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/Separator.html"
		},
		"elements.SliderFieldView": {
			"name": "SliderFieldView",
			"path": "elements.SliderFieldView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/SliderFieldView.html"
		},
		"elements.TabFocus": {
			"name": "TabFocus",
			"path": "elements.TabFocus",
			"description": "Update field focus from tab key events",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/TabFocus.html"
		},
		"elements.TabFocusable": {
			"name": "TabFocusable",
			"path": "elements.TabFocusable",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/TabFocusable.html"
		},
		"elements.TabsLayout": {
			"name": "TabsLayout",
			"path": "elements.TabsLayout",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/TabsLayout.html"
		},
		"elements.TextFieldView": {
			"name": "TextFieldView",
			"path": "elements.TextFieldView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/TextFieldView.html"
		},
		"elements.TextUtils": {
			"name": "TextUtils",
			"path": "elements.TextUtils",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/TextUtils.html"
		},
		"elements.Theme": {
			"name": "Theme",
			"path": "elements.Theme",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/Theme.html"
		},
		"elements.Tooltip": {
			"name": "Tooltip",
			"path": "elements.Tooltip",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/Tooltip.html"
		},
		"elements.UserData": {
			"name": "UserData",
			"path": "elements.UserData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/UserData.html"
		},
		"elements.VisualContainerView": {
			"name": "VisualContainerView",
			"path": "elements.VisualContainerView",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/VisualContainerView.html"
		},
		"elements.Window": {
			"name": "Window",
			"path": "elements.Window",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/Window.html"
		},
		"elements.WindowData": {
			"name": "WindowData",
			"path": "elements.WindowData",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/WindowData.html"
		},
		"elements.WindowItem": {
			"name": "WindowItem",
			"path": "elements.WindowItem",
			"description": "A simple class to hold window item data.\nThe same class is used for every window item kind so\nthat it's easier to recycle it and avoid allocating\ntoo much data at every frame.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/elements/WindowItem.html"
		},
		"elements.CheckStatus": {
			"name": "CheckStatus",
			"path": "elements.CheckStatus",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/elements/CheckStatus.html"
		},
		"elements.ChoiceStatus": {
			"name": "ChoiceStatus",
			"path": "elements.ChoiceStatus",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/elements/ChoiceStatus.html"
		},
		"elements.ConfirmStatus": {
			"name": "ConfirmStatus",
			"path": "elements.ConfirmStatus",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/elements/ConfirmStatus.html"
		},
		"elements.Entypo": {
			"name": "Entypo",
			"path": "elements.Entypo",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/elements/Entypo.html"
		},
		"elements.InfoStatus": {
			"name": "InfoStatus",
			"path": "elements.InfoStatus",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/elements/InfoStatus.html"
		},
		"elements.LabelPosition": {
			"name": "LabelPosition",
			"path": "elements.LabelPosition",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/elements/LabelPosition.html"
		},
		"elements.ListStatus": {
			"name": "ListStatus",
			"path": "elements.ListStatus",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/elements/ListStatus.html"
		},
		"elements.WindowItemKind": {
			"name": "WindowItemKind",
			"path": "elements.WindowItemKind",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/elements/WindowItemKind.html"
		},
		"elements.InputStyle": {
			"name": "InputStyle",
			"path": "elements.InputStyle",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/elements/InputStyle.html"
		},
		"elements.TextFieldKind": {
			"name": "TextFieldKind",
			"path": "elements.TextFieldKind",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/elements/TextFieldKind.html"
		},
		"elements.VisualContainerViewScaling": {
			"name": "VisualContainerViewScaling",
			"path": "elements.VisualContainerViewScaling",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/elements/VisualContainerViewScaling.html"
		},
		"elements.ArrayPointer": {
			"name": "ArrayPointer",
			"path": "elements.ArrayPointer",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/elements/ArrayPointer.html"
		},
		"elements.BoolPointer": {
			"name": "BoolPointer",
			"path": "elements.BoolPointer",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/elements/BoolPointer.html"
		},
		"elements.FloatPointer": {
			"name": "FloatPointer",
			"path": "elements.FloatPointer",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/elements/FloatPointer.html"
		},
		"elements.Handle": {
			"name": "Handle",
			"path": "elements.Handle",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/elements/Handle.html"
		},
		"elements.IntPointer": {
			"name": "IntPointer",
			"path": "elements.IntPointer",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/elements/IntPointer.html"
		},
		"elements.StringPointer": {
			"name": "StringPointer",
			"path": "elements.StringPointer",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/elements/StringPointer.html"
		},
		"imgui.Helpers": {
			"name": "Helpers",
			"path": "imgui.Helpers",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/Helpers.html"
		},
		"imgui.ImColor": {
			"name": "ImColor",
			"path": "imgui.ImColor",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImColor.html"
		},
		"imgui.ImDrawCallback": {
			"name": "ImDrawCallback",
			"path": "imgui.ImDrawCallback",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImDrawCallback.html"
		},
		"imgui.ImDrawCmd": {
			"name": "ImDrawCmd",
			"path": "imgui.ImDrawCmd",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImDrawCmd.html"
		},
		"imgui.ImDrawCornerFlags": {
			"name": "ImDrawCornerFlags",
			"path": "imgui.ImDrawCornerFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImDrawCornerFlags.html"
		},
		"imgui.ImDrawData": {
			"name": "ImDrawData",
			"path": "imgui.ImDrawData",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImDrawData.html"
		},
		"imgui.ImDrawIdx": {
			"name": "ImDrawIdx",
			"path": "imgui.ImDrawIdx",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImDrawIdx.html"
		},
		"imgui.ImDrawList": {
			"name": "ImDrawList",
			"path": "imgui.ImDrawList",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImDrawList.html"
		},
		"imgui.ImDrawListFlags": {
			"name": "ImDrawListFlags",
			"path": "imgui.ImDrawListFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImDrawListFlags.html"
		},
		"imgui.ImDrawListSplitter": {
			"name": "ImDrawListSplitter",
			"path": "imgui.ImDrawListSplitter",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImDrawListSplitter.html"
		},
		"imgui.ImFileHandle": {
			"name": "ImFileHandle",
			"path": "imgui.ImFileHandle",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImFileHandle.html"
		},
		"imgui.ImFont": {
			"name": "ImFont",
			"path": "imgui.ImFont",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImFont.html"
		},
		"imgui.ImFontAtlas": {
			"name": "ImFontAtlas",
			"path": "imgui.ImFontAtlas",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImFontAtlas.html"
		},
		"imgui.ImFontAtlasCustomRect": {
			"name": "ImFontAtlasCustomRect",
			"path": "imgui.ImFontAtlasCustomRect",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImFontAtlasCustomRect.html"
		},
		"imgui.ImFontAtlasFlags": {
			"name": "ImFontAtlasFlags",
			"path": "imgui.ImFontAtlasFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImFontAtlasFlags.html"
		},
		"imgui.ImFontConfig": {
			"name": "ImFontConfig",
			"path": "imgui.ImFontConfig",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImFontConfig.html"
		},
		"imgui.ImFontGlyphRangesBuilder": {
			"name": "ImFontGlyphRangesBuilder",
			"path": "imgui.ImFontGlyphRangesBuilder",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImFontGlyphRangesBuilder.html"
		},
		"imgui.ImGui": {
			"name": "ImGui",
			"path": "imgui.ImGui",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGui.html"
		},
		"imgui.ImGuiAxis": {
			"name": "ImGuiAxis",
			"path": "imgui.ImGuiAxis",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiAxis.html"
		},
		"imgui.ImGuiBackendFlags": {
			"name": "ImGuiBackendFlags",
			"path": "imgui.ImGuiBackendFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiBackendFlags.html"
		},
		"imgui.ImGuiButtonFlags": {
			"name": "ImGuiButtonFlags",
			"path": "imgui.ImGuiButtonFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiButtonFlags.html"
		},
		"imgui.ImGuiButtonFlagsPrivate": {
			"name": "ImGuiButtonFlagsPrivate",
			"path": "imgui.ImGuiButtonFlagsPrivate",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiButtonFlagsPrivate.html"
		},
		"imgui.ImGuiCol": {
			"name": "ImGuiCol",
			"path": "imgui.ImGuiCol",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiCol.html"
		},
		"imgui.ImGuiColorEditFlags": {
			"name": "ImGuiColorEditFlags",
			"path": "imgui.ImGuiColorEditFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiColorEditFlags.html"
		},
		"imgui.ImGuiComboFlags": {
			"name": "ImGuiComboFlags",
			"path": "imgui.ImGuiComboFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiComboFlags.html"
		},
		"imgui.ImGuiCond": {
			"name": "ImGuiCond",
			"path": "imgui.ImGuiCond",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiCond.html"
		},
		"imgui.ImGuiConfigFlags": {
			"name": "ImGuiConfigFlags",
			"path": "imgui.ImGuiConfigFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiConfigFlags.html"
		},
		"imgui.ImGuiContextHookCallback": {
			"name": "ImGuiContextHookCallback",
			"path": "imgui.ImGuiContextHookCallback",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiContextHookCallback.html"
		},
		"imgui.ImGuiContextHookType": {
			"name": "ImGuiContextHookType",
			"path": "imgui.ImGuiContextHookType",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiContextHookType.html"
		},
		"imgui.ImGuiDataType": {
			"name": "ImGuiDataType",
			"path": "imgui.ImGuiDataType",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiDataType.html"
		},
		"imgui.ImGuiDataTypePrivate": {
			"name": "ImGuiDataTypePrivate",
			"path": "imgui.ImGuiDataTypePrivate",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiDataTypePrivate.html"
		},
		"imgui.ImGuiDir": {
			"name": "ImGuiDir",
			"path": "imgui.ImGuiDir",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiDir.html"
		},
		"imgui.ImGuiDragDropFlags": {
			"name": "ImGuiDragDropFlags",
			"path": "imgui.ImGuiDragDropFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiDragDropFlags.html"
		},
		"imgui.ImGuiErrorLogCallback": {
			"name": "ImGuiErrorLogCallback",
			"path": "imgui.ImGuiErrorLogCallback",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiErrorLogCallback.html"
		},
		"imgui.ImGuiFocusedFlags": {
			"name": "ImGuiFocusedFlags",
			"path": "imgui.ImGuiFocusedFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiFocusedFlags.html"
		},
		"imgui.ImGuiHoveredFlags": {
			"name": "ImGuiHoveredFlags",
			"path": "imgui.ImGuiHoveredFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiHoveredFlags.html"
		},
		"imgui.ImGuiID": {
			"name": "ImGuiID",
			"path": "imgui.ImGuiID",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiID.html"
		},
		"imgui.ImGuiIO": {
			"name": "ImGuiIO",
			"path": "imgui.ImGuiIO",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiIO.html"
		},
		"imgui.ImGuiInputReadMode": {
			"name": "ImGuiInputReadMode",
			"path": "imgui.ImGuiInputReadMode",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiInputReadMode.html"
		},
		"imgui.ImGuiInputSource": {
			"name": "ImGuiInputSource",
			"path": "imgui.ImGuiInputSource",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiInputSource.html"
		},
		"imgui.ImGuiInputTextCallback": {
			"name": "ImGuiInputTextCallback",
			"path": "imgui.ImGuiInputTextCallback",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiInputTextCallback.html"
		},
		"imgui.ImGuiInputTextCallbackData": {
			"name": "ImGuiInputTextCallbackData",
			"path": "imgui.ImGuiInputTextCallbackData",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiInputTextCallbackData.html"
		},
		"imgui.ImGuiInputTextFlags": {
			"name": "ImGuiInputTextFlags",
			"path": "imgui.ImGuiInputTextFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiInputTextFlags.html"
		},
		"imgui.ImGuiItemFlags": {
			"name": "ImGuiItemFlags",
			"path": "imgui.ImGuiItemFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiItemFlags.html"
		},
		"imgui.ImGuiItemStatusFlags": {
			"name": "ImGuiItemStatusFlags",
			"path": "imgui.ImGuiItemStatusFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiItemStatusFlags.html"
		},
		"imgui.ImGuiKey": {
			"name": "ImGuiKey",
			"path": "imgui.ImGuiKey",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiKey.html"
		},
		"imgui.ImGuiKeyModFlags": {
			"name": "ImGuiKeyModFlags",
			"path": "imgui.ImGuiKeyModFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiKeyModFlags.html"
		},
		"imgui.ImGuiLayoutType": {
			"name": "ImGuiLayoutType",
			"path": "imgui.ImGuiLayoutType",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiLayoutType.html"
		},
		"imgui.ImGuiListClipper": {
			"name": "ImGuiListClipper",
			"path": "imgui.ImGuiListClipper",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiListClipper.html"
		},
		"imgui.ImGuiLogType": {
			"name": "ImGuiLogType",
			"path": "imgui.ImGuiLogType",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiLogType.html"
		},
		"imgui.ImGuiMouseButton": {
			"name": "ImGuiMouseButton",
			"path": "imgui.ImGuiMouseButton",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiMouseButton.html"
		},
		"imgui.ImGuiMouseCursor": {
			"name": "ImGuiMouseCursor",
			"path": "imgui.ImGuiMouseCursor",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiMouseCursor.html"
		},
		"imgui.ImGuiNavDirSourceFlags": {
			"name": "ImGuiNavDirSourceFlags",
			"path": "imgui.ImGuiNavDirSourceFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiNavDirSourceFlags.html"
		},
		"imgui.ImGuiNavForward": {
			"name": "ImGuiNavForward",
			"path": "imgui.ImGuiNavForward",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiNavForward.html"
		},
		"imgui.ImGuiNavHighlightFlags": {
			"name": "ImGuiNavHighlightFlags",
			"path": "imgui.ImGuiNavHighlightFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiNavHighlightFlags.html"
		},
		"imgui.ImGuiNavInput": {
			"name": "ImGuiNavInput",
			"path": "imgui.ImGuiNavInput",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiNavInput.html"
		},
		"imgui.ImGuiNavLayer": {
			"name": "ImGuiNavLayer",
			"path": "imgui.ImGuiNavLayer",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiNavLayer.html"
		},
		"imgui.ImGuiNavMoveFlags": {
			"name": "ImGuiNavMoveFlags",
			"path": "imgui.ImGuiNavMoveFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiNavMoveFlags.html"
		},
		"imgui.ImGuiNextItemDataFlags": {
			"name": "ImGuiNextItemDataFlags",
			"path": "imgui.ImGuiNextItemDataFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiNextItemDataFlags.html"
		},
		"imgui.ImGuiNextWindowDataFlags": {
			"name": "ImGuiNextWindowDataFlags",
			"path": "imgui.ImGuiNextWindowDataFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiNextWindowDataFlags.html"
		},
		"imgui.ImGuiOldColumnFlags": {
			"name": "ImGuiOldColumnFlags",
			"path": "imgui.ImGuiOldColumnFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiOldColumnFlags.html"
		},
		"imgui.ImGuiOnceUponAFrame": {
			"name": "ImGuiOnceUponAFrame",
			"path": "imgui.ImGuiOnceUponAFrame",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiOnceUponAFrame.html"
		},
		"imgui.ImGuiPayload": {
			"name": "ImGuiPayload",
			"path": "imgui.ImGuiPayload",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiPayload.html"
		},
		"imgui.ImGuiPlotType": {
			"name": "ImGuiPlotType",
			"path": "imgui.ImGuiPlotType",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiPlotType.html"
		},
		"imgui.ImGuiPopupFlags": {
			"name": "ImGuiPopupFlags",
			"path": "imgui.ImGuiPopupFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiPopupFlags.html"
		},
		"imgui.ImGuiPopupPositionPolicy": {
			"name": "ImGuiPopupPositionPolicy",
			"path": "imgui.ImGuiPopupPositionPolicy",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiPopupPositionPolicy.html"
		},
		"imgui.ImGuiSelectableFlags": {
			"name": "ImGuiSelectableFlags",
			"path": "imgui.ImGuiSelectableFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiSelectableFlags.html"
		},
		"imgui.ImGuiSelectableFlagsPrivate": {
			"name": "ImGuiSelectableFlagsPrivate",
			"path": "imgui.ImGuiSelectableFlagsPrivate",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiSelectableFlagsPrivate.html"
		},
		"imgui.ImGuiSeparatorFlags": {
			"name": "ImGuiSeparatorFlags",
			"path": "imgui.ImGuiSeparatorFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiSeparatorFlags.html"
		},
		"imgui.ImGuiSizeCallback": {
			"name": "ImGuiSizeCallback",
			"path": "imgui.ImGuiSizeCallback",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiSizeCallback.html"
		},
		"imgui.ImGuiSliderFlags": {
			"name": "ImGuiSliderFlags",
			"path": "imgui.ImGuiSliderFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiSliderFlags.html"
		},
		"imgui.ImGuiSliderFlagsPrivate": {
			"name": "ImGuiSliderFlagsPrivate",
			"path": "imgui.ImGuiSliderFlagsPrivate",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiSliderFlagsPrivate.html"
		},
		"imgui.ImGuiSortDirection": {
			"name": "ImGuiSortDirection",
			"path": "imgui.ImGuiSortDirection",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiSortDirection.html"
		},
		"imgui.ImGuiStoragePair": {
			"name": "ImGuiStoragePair",
			"path": "imgui.ImGuiStoragePair",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiStoragePair.html"
		},
		"imgui.ImGuiStyle": {
			"name": "ImGuiStyle",
			"path": "imgui.ImGuiStyle",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiStyle.html"
		},
		"imgui.ImGuiStyleVar": {
			"name": "ImGuiStyleVar",
			"path": "imgui.ImGuiStyleVar",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiStyleVar.html"
		},
		"imgui.ImGuiTabBarFlags": {
			"name": "ImGuiTabBarFlags",
			"path": "imgui.ImGuiTabBarFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTabBarFlags.html"
		},
		"imgui.ImGuiTabBarFlagsPrivate": {
			"name": "ImGuiTabBarFlagsPrivate",
			"path": "imgui.ImGuiTabBarFlagsPrivate",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTabBarFlagsPrivate.html"
		},
		"imgui.ImGuiTabItemFlags": {
			"name": "ImGuiTabItemFlags",
			"path": "imgui.ImGuiTabItemFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTabItemFlags.html"
		},
		"imgui.ImGuiTabItemFlagsPrivate": {
			"name": "ImGuiTabItemFlagsPrivate",
			"path": "imgui.ImGuiTabItemFlagsPrivate",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTabItemFlagsPrivate.html"
		},
		"imgui.ImGuiTableBgTarget": {
			"name": "ImGuiTableBgTarget",
			"path": "imgui.ImGuiTableBgTarget",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTableBgTarget.html"
		},
		"imgui.ImGuiTableColumnFlags": {
			"name": "ImGuiTableColumnFlags",
			"path": "imgui.ImGuiTableColumnFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTableColumnFlags.html"
		},
		"imgui.ImGuiTableColumnIdx": {
			"name": "ImGuiTableColumnIdx",
			"path": "imgui.ImGuiTableColumnIdx",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTableColumnIdx.html"
		},
		"imgui.ImGuiTableDrawChannelIdx": {
			"name": "ImGuiTableDrawChannelIdx",
			"path": "imgui.ImGuiTableDrawChannelIdx",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTableDrawChannelIdx.html"
		},
		"imgui.ImGuiTableFlags": {
			"name": "ImGuiTableFlags",
			"path": "imgui.ImGuiTableFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTableFlags.html"
		},
		"imgui.ImGuiTableRowFlags": {
			"name": "ImGuiTableRowFlags",
			"path": "imgui.ImGuiTableRowFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTableRowFlags.html"
		},
		"imgui.ImGuiTextBuffer": {
			"name": "ImGuiTextBuffer",
			"path": "imgui.ImGuiTextBuffer",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTextBuffer.html"
		},
		"imgui.ImGuiTextFilter": {
			"name": "ImGuiTextFilter",
			"path": "imgui.ImGuiTextFilter",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTextFilter.html"
		},
		"imgui.ImGuiTextFlags": {
			"name": "ImGuiTextFlags",
			"path": "imgui.ImGuiTextFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTextFlags.html"
		},
		"imgui.ImGuiTextRange": {
			"name": "ImGuiTextRange",
			"path": "imgui.ImGuiTextRange",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTextRange.html"
		},
		"imgui.ImGuiTooltipFlags": {
			"name": "ImGuiTooltipFlags",
			"path": "imgui.ImGuiTooltipFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTooltipFlags.html"
		},
		"imgui.ImGuiTreeNodeFlags": {
			"name": "ImGuiTreeNodeFlags",
			"path": "imgui.ImGuiTreeNodeFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTreeNodeFlags.html"
		},
		"imgui.ImGuiTreeNodeFlagsPrivate": {
			"name": "ImGuiTreeNodeFlagsPrivate",
			"path": "imgui.ImGuiTreeNodeFlagsPrivate",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiTreeNodeFlagsPrivate.html"
		},
		"imgui.ImGuiWindowFlags": {
			"name": "ImGuiWindowFlags",
			"path": "imgui.ImGuiWindowFlags",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiWindowFlags.html"
		},
		"imgui.ImGuiWindowPtr": {
			"name": "ImGuiWindowPtr",
			"path": "imgui.ImGuiWindowPtr",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImGuiWindowPtr.html"
		},
		"imgui.ImPoolIdx": {
			"name": "ImPoolIdx",
			"path": "imgui.ImPoolIdx",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImPoolIdx.html"
		},
		"imgui.ImS16": {
			"name": "ImS16",
			"path": "imgui.ImS16",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImS16.html"
		},
		"imgui.ImS32": {
			"name": "ImS32",
			"path": "imgui.ImS32",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImS32.html"
		},
		"imgui.ImS64": {
			"name": "ImS64",
			"path": "imgui.ImS64",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImS64.html"
		},
		"imgui.ImS8": {
			"name": "ImS8",
			"path": "imgui.ImS8",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImS8.html"
		},
		"imgui.ImTextureID": {
			"name": "ImTextureID",
			"path": "imgui.ImTextureID",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImTextureID.html"
		},
		"imgui.ImU16": {
			"name": "ImU16",
			"path": "imgui.ImU16",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImU16.html"
		},
		"imgui.ImU32": {
			"name": "ImU32",
			"path": "imgui.ImU32",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImU32.html"
		},
		"imgui.ImU64": {
			"name": "ImU64",
			"path": "imgui.ImU64",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImU64.html"
		},
		"imgui.ImU8": {
			"name": "ImU8",
			"path": "imgui.ImU8",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImU8.html"
		},
		"imgui.ImVec2": {
			"name": "ImVec2",
			"path": "imgui.ImVec2",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImVec2.html"
		},
		"imgui.ImVec4": {
			"name": "ImVec4",
			"path": "imgui.ImVec4",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImVec4.html"
		},
		"imgui.ImVector": {
			"name": "ImVector",
			"path": "imgui.ImVector",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImVector.html"
		},
		"imgui.ImWchar": {
			"name": "ImWchar",
			"path": "imgui.ImWchar",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImWchar.html"
		},
		"imgui.ImWchar16": {
			"name": "ImWchar16",
			"path": "imgui.ImWchar16",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImWchar16.html"
		},
		"imgui.ImWchar32": {
			"name": "ImWchar32",
			"path": "imgui.ImWchar32",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/imgui/ImWchar32.html"
		},
		"nape.Config": {
			"name": "Config",
			"path": "nape.Config",
			"description": "Configuration parameters for Nape",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/Config.html"
		},
		"nape.TArray": {
			"name": "TArray",
			"path": "nape.TArray",
			"description": "Platform specific Array type.\n\nFor flash10+ This is flash.Vector&lt;T&gt;, and otherwise\nArray&lt;T&gt;.\n<p></p>",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/nape/TArray.html"
		},
		"spine.AlphaTimeline": {
			"name": "AlphaTimeline",
			"path": "spine.AlphaTimeline",
			"description": "Changes the alpha for a slot's {@link Slot#getColor()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/AlphaTimeline.html"
		},
		"spine.Animation": {
			"name": "Animation",
			"path": "spine.Animation",
			"description": "Stores a list of timelines to animate a skeleton's pose over time.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Animation.html"
		},
		"spine.AnimationState": {
			"name": "AnimationState",
			"path": "spine.AnimationState",
			"description": "Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\nmultiple animations on top of each other (layering).\n\nSee Applying Animations in the Spine Runtimes Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/AnimationState.html"
		},
		"spine.AnimationStateAdapter": {
			"name": "AnimationStateAdapter",
			"path": "spine.AnimationStateAdapter",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/AnimationStateAdapter.html"
		},
		"spine.AnimationStateData": {
			"name": "AnimationStateData",
			"path": "spine.AnimationStateData",
			"description": "Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/AnimationStateData.html"
		},
		"spine.AnimationStateDataKey": {
			"name": "AnimationStateDataKey",
			"path": "spine.AnimationStateDataKey",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/AnimationStateDataKey.html"
		},
		"spine.AnimationStateListener": {
			"name": "AnimationStateListener",
			"path": "spine.AnimationStateListener",
			"description": "The interface to implement for receiving TrackEntry events. It is always safe to call AnimationState methods when receiving\nevents.\n\nSee TrackEntry {@link TrackEntry#setListener(AnimationStateListener)} and AnimationState\n{@link AnimationState#addListener(AnimationStateListener)}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/AnimationStateListener.html"
		},
		"spine.AttachmentTimeline": {
			"name": "AttachmentTimeline",
			"path": "spine.AttachmentTimeline",
			"description": "Changes a slot's {@link Slot#getAttachment()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/AttachmentTimeline.html"
		},
		"spine.BlendMode_enum": {
			"name": "BlendMode_enum",
			"path": "spine.BlendMode_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/BlendMode_enum.html"
		},
		"spine.Bone": {
			"name": "Bone",
			"path": "spine.Bone",
			"description": "Stores a bone's current pose.\n\nA bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\nlocal transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\nconstraint or application code modifies the world transform after it was computed from the local transform.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Bone.html"
		},
		"spine.BoneData": {
			"name": "BoneData",
			"path": "spine.BoneData",
			"description": "Stores the setup pose for a {@link Bone}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/BoneData.html"
		},
		"spine.BoneTimeline": {
			"name": "BoneTimeline",
			"path": "spine.BoneTimeline",
			"description": "An interface for timelines which change the property of a bone.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/BoneTimeline.html"
		},
		"spine.ConstraintData": {
			"name": "ConstraintData",
			"path": "spine.ConstraintData",
			"description": "The base class for all constraint datas.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/ConstraintData.html"
		},
		"spine.CurveTimeline": {
			"name": "CurveTimeline",
			"path": "spine.CurveTimeline",
			"description": "The base class for timelines that interpolate between frame values using stepped, linear, or a Bezier curve.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/CurveTimeline.html"
		},
		"spine.CurveTimeline1": {
			"name": "CurveTimeline1",
			"path": "spine.CurveTimeline1",
			"description": "The base class for a {@link CurveTimeline} that sets one property.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/CurveTimeline1.html"
		},
		"spine.CurveTimeline2": {
			"name": "CurveTimeline2",
			"path": "spine.CurveTimeline2",
			"description": "The base class for a {@link CurveTimeline} which sets two properties.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/CurveTimeline2.html"
		},
		"spine.DeformTimeline": {
			"name": "DeformTimeline",
			"path": "spine.DeformTimeline",
			"description": "Changes a slot's {@link Slot#getDeform()} to deform a {@link VertexAttachment}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/DeformTimeline.html"
		},
		"spine.DrawOrderTimeline": {
			"name": "DrawOrderTimeline",
			"path": "spine.DrawOrderTimeline",
			"description": "Changes a skeleton's {@link Skeleton#getDrawOrder()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/DrawOrderTimeline.html"
		},
		"spine.Event": {
			"name": "Event",
			"path": "spine.Event",
			"description": "Stores the current pose values for an {@link Event}.\n\nSee Timeline\n{@link Timeline#apply(Skeleton, float, float, com.badlogic.gdx.utils.Array, float, com.esotericsoftware.spine.Animation.MixBlend, com.esotericsoftware.spine.Animation.MixDirection)},\nAnimationStateListener {@link AnimationStateListener#event(com.esotericsoftware.spine.AnimationState.TrackEntry, Event)}, and\nEvents in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Event.html"
		},
		"spine.EventData": {
			"name": "EventData",
			"path": "spine.EventData",
			"description": "Stores the setup pose values for an {@link Event}.\n\nSee Events in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/EventData.html"
		},
		"spine.EventQueue": {
			"name": "EventQueue",
			"path": "spine.EventQueue",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/EventQueue.html"
		},
		"spine.EventTimeline": {
			"name": "EventTimeline",
			"path": "spine.EventTimeline",
			"description": "Fires an {@link Event} when specific animation times are reached.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/EventTimeline.html"
		},
		"spine.EventType_enum": {
			"name": "EventType_enum",
			"path": "spine.EventType_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/EventType_enum.html"
		},
		"spine.IkConstraint": {
			"name": "IkConstraint",
			"path": "spine.IkConstraint",
			"description": "Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\nthe last bone is as close to the target bone as possible.\n\nSee IK constraints in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/IkConstraint.html"
		},
		"spine.IkConstraintData": {
			"name": "IkConstraintData",
			"path": "spine.IkConstraintData",
			"description": "Stores the setup pose for an {@link IkConstraint}.\n\nSee IK constraints in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/IkConstraintData.html"
		},
		"spine.IkConstraintTimeline": {
			"name": "IkConstraintTimeline",
			"path": "spine.IkConstraintTimeline",
			"description": "Changes an IK constraint's {@link IkConstraint#getMix()}, {@link IkConstraint#getSoftness()},\n{@link IkConstraint#getBendDirection()}, {@link IkConstraint#getStretch()}, and {@link IkConstraint#getCompress()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/IkConstraintTimeline.html"
		},
		"spine.LinkedMesh": {
			"name": "LinkedMesh",
			"path": "spine.LinkedMesh",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/LinkedMesh.html"
		},
		"spine.MixBlend_enum": {
			"name": "MixBlend_enum",
			"path": "spine.MixBlend_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/MixBlend_enum.html"
		},
		"spine.MixDirection_enum": {
			"name": "MixDirection_enum",
			"path": "spine.MixDirection_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/MixDirection_enum.html"
		},
		"spine.PathConstraint": {
			"name": "PathConstraint",
			"path": "spine.PathConstraint",
			"description": "Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\nconstrained bones so they follow a {@link PathAttachment}.\n\nSee Path constraints in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/PathConstraint.html"
		},
		"spine.PathConstraintData": {
			"name": "PathConstraintData",
			"path": "spine.PathConstraintData",
			"description": "Stores the setup pose for a {@link PathConstraint}.\n\nSee Path constraints in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/PathConstraintData.html"
		},
		"spine.PathConstraintMixTimeline": {
			"name": "PathConstraintMixTimeline",
			"path": "spine.PathConstraintMixTimeline",
			"description": "Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\n{@link PathConstraint#getMixY()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/PathConstraintMixTimeline.html"
		},
		"spine.PathConstraintPositionTimeline": {
			"name": "PathConstraintPositionTimeline",
			"path": "spine.PathConstraintPositionTimeline",
			"description": "Changes a path constraint's {@link PathConstraint#getPosition()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/PathConstraintPositionTimeline.html"
		},
		"spine.PathConstraintSpacingTimeline": {
			"name": "PathConstraintSpacingTimeline",
			"path": "spine.PathConstraintSpacingTimeline",
			"description": "Changes a path constraint's {@link PathConstraint#getSpacing()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/PathConstraintSpacingTimeline.html"
		},
		"spine.PositionMode_enum": {
			"name": "PositionMode_enum",
			"path": "spine.PositionMode_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/PositionMode_enum.html"
		},
		"spine.Property_enum": {
			"name": "Property_enum",
			"path": "spine.Property_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Property_enum.html"
		},
		"spine.RGB2Timeline": {
			"name": "RGB2Timeline",
			"path": "spine.RGB2Timeline",
			"description": "Changes the RGB for a slot's {@link Slot#getColor()} and {@link Slot#getDarkColor()} for two color tinting.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/RGB2Timeline.html"
		},
		"spine.RGBA2Timeline": {
			"name": "RGBA2Timeline",
			"path": "spine.RGBA2Timeline",
			"description": "Changes a slot's {@link Slot#getColor()} and {@link Slot#getDarkColor()} for two color tinting.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/RGBA2Timeline.html"
		},
		"spine.RGBATimeline": {
			"name": "RGBATimeline",
			"path": "spine.RGBATimeline",
			"description": "Changes a slot's {@link Slot#getColor()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/RGBATimeline.html"
		},
		"spine.RGBTimeline": {
			"name": "RGBTimeline",
			"path": "spine.RGBTimeline",
			"description": "Changes the RGB for a slot's {@link Slot#getColor()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/RGBTimeline.html"
		},
		"spine.RotateMode_enum": {
			"name": "RotateMode_enum",
			"path": "spine.RotateMode_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/RotateMode_enum.html"
		},
		"spine.RotateTimeline": {
			"name": "RotateTimeline",
			"path": "spine.RotateTimeline",
			"description": "Changes a bone's local {@link Bone#getRotation()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/RotateTimeline.html"
		},
		"spine.ScaleTimeline": {
			"name": "ScaleTimeline",
			"path": "spine.ScaleTimeline",
			"description": "Changes a bone's local {@link Bone#getScaleX()} and {@link Bone#getScaleY()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/ScaleTimeline.html"
		},
		"spine.ScaleXTimeline": {
			"name": "ScaleXTimeline",
			"path": "spine.ScaleXTimeline",
			"description": "Changes a bone's local {@link Bone#getScaleX()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/ScaleXTimeline.html"
		},
		"spine.ScaleYTimeline": {
			"name": "ScaleYTimeline",
			"path": "spine.ScaleYTimeline",
			"description": "Changes a bone's local {@link Bone#getScaleY()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/ScaleYTimeline.html"
		},
		"spine.ShearTimeline": {
			"name": "ShearTimeline",
			"path": "spine.ShearTimeline",
			"description": "Changes a bone's local {@link Bone#getShearX()} and {@link Bone#getShearY()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/ShearTimeline.html"
		},
		"spine.ShearXTimeline": {
			"name": "ShearXTimeline",
			"path": "spine.ShearXTimeline",
			"description": "Changes a bone's local {@link Bone#getShearX()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/ShearXTimeline.html"
		},
		"spine.ShearYTimeline": {
			"name": "ShearYTimeline",
			"path": "spine.ShearYTimeline",
			"description": "Changes a bone's local {@link Bone#getShearY()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/ShearYTimeline.html"
		},
		"spine.Skeleton": {
			"name": "Skeleton",
			"path": "spine.Skeleton",
			"description": "Stores the current pose for a skeleton.\n\nSee Instance objects in the Spine\nRuntimes Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Skeleton.html"
		},
		"spine.SkeletonBounds": {
			"name": "SkeletonBounds",
			"path": "spine.SkeletonBounds",
			"description": "Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\nprovided along with convenience methods for doing hit detection.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/SkeletonBounds.html"
		},
		"spine.SkeletonData": {
			"name": "SkeletonData",
			"path": "spine.SkeletonData",
			"description": "Stores the setup pose and all of the stateless data for a skeleton.\n\nSee Data objects in the Spine Runtimes\nGuide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/SkeletonData.html"
		},
		"spine.SkeletonJson": {
			"name": "SkeletonJson",
			"path": "spine.SkeletonJson",
			"description": "Loads skeleton data in the Spine JSON format.\n\nJSON is human readable but the binary format is much smaller on disk and faster to load. See {@link SkeletonBinary}.\n\nSee Spine JSON format and\nJSON and binary data in the Spine\nRuntimes Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/SkeletonJson.html"
		},
		"spine.SkeletonLoader": {
			"name": "SkeletonLoader",
			"path": "spine.SkeletonLoader",
			"description": "Base class for loading skeleton data from a file.\n\nSee JSON and binary data in the\nSpine Runtimes Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/SkeletonLoader.html"
		},
		"spine.Skin": {
			"name": "Skin",
			"path": "spine.Skin",
			"description": "Stores attachments by slot index and attachment name.\n\nSee SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\nRuntime skins in the Spine Runtimes Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Skin.html"
		},
		"spine.SkinEntry": {
			"name": "SkinEntry",
			"path": "spine.SkinEntry",
			"description": "Stores an entry in the skin consisting of the slot index and the attachment name.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/SkinEntry.html"
		},
		"spine.Slot": {
			"name": "Slot",
			"path": "spine.Slot",
			"description": "Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\nstate for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\nacross multiple skeletons.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Slot.html"
		},
		"spine.SlotData": {
			"name": "SlotData",
			"path": "spine.SlotData",
			"description": "Stores the setup pose for a {@link Slot}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/SlotData.html"
		},
		"spine.SlotTimeline": {
			"name": "SlotTimeline",
			"path": "spine.SlotTimeline",
			"description": "An interface for timelines which change the property of a slot.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/SlotTimeline.html"
		},
		"spine.SpacingMode_enum": {
			"name": "SpacingMode_enum",
			"path": "spine.SpacingMode_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/SpacingMode_enum.html"
		},
		"spine.Timeline": {
			"name": "Timeline",
			"path": "spine.Timeline",
			"description": "The base class for all timelines.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Timeline.html"
		},
		"spine.TrackEntry": {
			"name": "TrackEntry",
			"path": "spine.TrackEntry",
			"description": "Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n\nReferences to a track entry must not be kept after the {@link AnimationStateListener#dispose(TrackEntry)} event occurs.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/TrackEntry.html"
		},
		"spine.TransformConstraint": {
			"name": "TransformConstraint",
			"path": "spine.TransformConstraint",
			"description": "Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\nbones to match that of the target bone.\n\nSee Transform constraints in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/TransformConstraint.html"
		},
		"spine.TransformConstraintData": {
			"name": "TransformConstraintData",
			"path": "spine.TransformConstraintData",
			"description": "Stores the setup pose for a {@link TransformConstraint}.\n\nSee Transform constraints in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/TransformConstraintData.html"
		},
		"spine.TransformConstraintTimeline": {
			"name": "TransformConstraintTimeline",
			"path": "spine.TransformConstraintTimeline",
			"description": "Changes a transform constraint's {@link TransformConstraint#getMixRotate()}, {@link TransformConstraint#getMixX()},\n{@link TransformConstraint#getMixY()}, {@link TransformConstraint#getMixScaleX()},\n{@link TransformConstraint#getMixScaleY()}, and {@link TransformConstraint#getMixShearY()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/TransformConstraintTimeline.html"
		},
		"spine.TransformMode_enum": {
			"name": "TransformMode_enum",
			"path": "spine.TransformMode_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/TransformMode_enum.html"
		},
		"spine.TranslateTimeline": {
			"name": "TranslateTimeline",
			"path": "spine.TranslateTimeline",
			"description": "Changes a bone's local {@link Bone#getX()} and {@link Bone#getY()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/TranslateTimeline.html"
		},
		"spine.TranslateXTimeline": {
			"name": "TranslateXTimeline",
			"path": "spine.TranslateXTimeline",
			"description": "Changes a bone's local {@link Bone#getX()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/TranslateXTimeline.html"
		},
		"spine.TranslateYTimeline": {
			"name": "TranslateYTimeline",
			"path": "spine.TranslateYTimeline",
			"description": "Changes a bone's local {@link Bone#getY()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/TranslateYTimeline.html"
		},
		"spine.Updatable": {
			"name": "Updatable",
			"path": "spine.Updatable",
			"description": "The interface for items updated by {@link Skeleton#updateWorldTransform()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/Updatable.html"
		},
		"spine.BlendMode": {
			"name": "BlendMode",
			"path": "spine.BlendMode",
			"description": "Determines how images are blended with existing pixels when drawn.",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/BlendMode.html"
		},
		"spine.EventType": {
			"name": "EventType",
			"path": "spine.EventType",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/EventType.html"
		},
		"spine.MixBlend": {
			"name": "MixBlend",
			"path": "spine.MixBlend",
			"description": "Controls how timeline values are mixed with setup pose values or current pose values when a timeline is applied with\nalpha &lt; 1.\n\nSee Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/MixBlend.html"
		},
		"spine.MixDirection": {
			"name": "MixDirection",
			"path": "spine.MixDirection",
			"description": "Indicates whether a timeline's alpha is mixing out over time toward 0 (the setup or current pose value) or\nmixing in toward 1 (the timeline's value). Some timelines use this to decide how values are applied.\n\nSee Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/MixDirection.html"
		},
		"spine.PositionMode": {
			"name": "PositionMode",
			"path": "spine.PositionMode",
			"description": "Controls how the first bone is positioned along the path.\n\nSee Position mode in the Spine User Guide.",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/PositionMode.html"
		},
		"spine.Property": {
			"name": "Property",
			"path": "spine.Property",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/Property.html"
		},
		"spine.RotateMode": {
			"name": "RotateMode",
			"path": "spine.RotateMode",
			"description": "Controls how bones are rotated, translated, and scaled to match the path.\n\nSee Rotate mode in the Spine User Guide.",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/RotateMode.html"
		},
		"spine.SpacingMode": {
			"name": "SpacingMode",
			"path": "spine.SpacingMode",
			"description": "Controls how bones after the first bone are positioned along the path.\n\nSee Spacing mode in the Spine User Guide.",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/SpacingMode.html"
		},
		"spine.TransformMode": {
			"name": "TransformMode",
			"path": "spine.TransformMode",
			"description": "Determines how a bone inherits world transforms from parent bones.",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/TransformMode.html"
		},
		"tracker.Assert": {
			"name": "Assert",
			"path": "tracker.Assert",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Assert.html"
		},
		"tracker.Autorun": {
			"name": "Autorun",
			"path": "tracker.Autorun",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Autorun.html"
		},
		"tracker.DynamicEvents": {
			"name": "DynamicEvents",
			"path": "tracker.DynamicEvents",
			"description": "Fire and listen to dynamic events. Works similarly to static events, but dynamic.\nIf you can know the event names at compile time, using static events (@event function myEvent();) is preferred.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/DynamicEvents.html"
		},
		"tracker.EventDispatcher": {
			"name": "EventDispatcher",
			"path": "tracker.EventDispatcher",
			"description": "Event dispatcher used by DynamicEvents and Events macro as an alternative implementation\nthat doesn't require to add a lot of methods on classes with events.\nThis is basically the same code as what is statically generated by Events macro,\nbut made dynamic and usable for any type.\nThis is not really supposed to be used as is as it is pretty low-level.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/EventDispatcher.html"
		},
		"tracker.Events": {
			"name": "Events",
			"path": "tracker.Events",
			"description": "Events allows to add strictly typed events to classes.\nGenerates related methods: on|once|off|emit{EventName}()",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Events.html"
		},
		"tracker.Extensions": {
			"name": "Extensions",
			"path": "tracker.Extensions",
			"description": "A bunch of static extensions to make life easier.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Extensions.html"
		},
		"tracker.History": {
			"name": "History",
			"path": "tracker.History",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/History.html"
		},
		"tracker.Model": {
			"name": "Model",
			"path": "tracker.Model",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Model.html"
		},
		"tracker.Observable": {
			"name": "Observable",
			"path": "tracker.Observable",
			"description": "Observable allows to observe properties of an object.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Observable.html"
		},
		"tracker.SaveModel": {
			"name": "SaveModel",
			"path": "tracker.SaveModel",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/SaveModel.html"
		},
		"tracker.Serializable": {
			"name": "Serializable",
			"path": "tracker.Serializable",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Serializable.html"
		},
		"tracker.Serialize": {
			"name": "Serialize",
			"path": "tracker.Serialize",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Serialize.html"
		},
		"tracker.SerializeChangeset": {
			"name": "SerializeChangeset",
			"path": "tracker.SerializeChangeset",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/SerializeChangeset.html"
		},
		"tracker.SerializeModel": {
			"name": "SerializeModel",
			"path": "tracker.SerializeModel",
			"description": "Utility to serialize a model object (and its children) continuously and efficiently",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/SerializeModel.html"
		},
		"tracker.Tracker": {
			"name": "Tracker",
			"path": "tracker.Tracker",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Tracker.html"
		},
		"tracker.Utils": {
			"name": "Utils",
			"path": "tracker.Utils",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/tracker/Utils.html"
		},
		"clay.audio.AudioData": {
			"name": "AudioData",
			"path": "clay.audio.AudioData",
			"description": "An audio data object contains information about audio samples or streams, ready to be used.\nAudioData objects typically come from the app.assets.audio API or app.audio.module.data_from_path,\nsince the implemenation details of decoding audio and streams are module level implementation details.\nThis is stored by AudioSource and AssetAudio objects for example.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioData.html"
		},
		"clay.audio.AudioDataOptions": {
			"name": "AudioDataOptions",
			"path": "clay.audio.AudioDataOptions",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioDataOptions.html"
		},
		"clay.audio.AudioInstance": {
			"name": "AudioInstance",
			"path": "clay.audio.AudioInstance",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioInstance.html"
		},
		"clay.audio.AudioSource": {
			"name": "AudioSource",
			"path": "clay.audio.AudioSource",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioSource.html"
		},
		"clay.audio.AudioErrorReason": {
			"name": "AudioErrorReason",
			"path": "clay.audio.AudioErrorReason",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioErrorReason.html"
		},
		"clay.audio.AudioEvent": {
			"name": "AudioEvent",
			"path": "clay.audio.AudioEvent",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioEvent.html"
		},
		"clay.audio.AudioFormat": {
			"name": "AudioFormat",
			"path": "clay.audio.AudioFormat",
			"description": "The type of format data for audio",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioFormat.html"
		},
		"clay.audio.AudioState": {
			"name": "AudioState",
			"path": "clay.audio.AudioState",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioState.html"
		},
		"clay.audio.AudioHandle": {
			"name": "AudioHandle",
			"path": "clay.audio.AudioHandle",
			"description": "An audio handle for tracking audio instances",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/audio/AudioHandle.html"
		},
		"clay.base.BaseAssets": {
			"name": "BaseAssets",
			"path": "clay.base.BaseAssets",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/base/BaseAssets.html"
		},
		"clay.base.BaseAudio": {
			"name": "BaseAudio",
			"path": "clay.base.BaseAudio",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/base/BaseAudio.html"
		},
		"clay.base.BaseIO": {
			"name": "BaseIO",
			"path": "clay.base.BaseIO",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/base/BaseIO.html"
		},
		"clay.base.BaseRuntime": {
			"name": "BaseRuntime",
			"path": "clay.base.BaseRuntime",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/base/BaseRuntime.html"
		},
		"clay.buffers.ArrayBufferIO": {
			"name": "ArrayBufferIO",
			"path": "clay.buffers.ArrayBufferIO",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/ArrayBufferIO.html"
		},
		"clay.buffers.ArrayBufferViewImpl": {
			"name": "ArrayBufferViewImpl",
			"path": "clay.buffers.ArrayBufferViewImpl",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/ArrayBufferViewImpl.html"
		},
		"clay.buffers.ArrayBufferImpl": {
			"name": "ArrayBufferImpl",
			"path": "clay.buffers.ArrayBufferImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/ArrayBufferImpl.html"
		},
		"clay.buffers.Float32ArrayImpl": {
			"name": "Float32ArrayImpl",
			"path": "clay.buffers.Float32ArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Float32ArrayImpl.html"
		},
		"clay.buffers.Float32ArrayImplJS": {
			"name": "Float32ArrayImplJS",
			"path": "clay.buffers.Float32ArrayImplJS",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Float32ArrayImplJS.html"
		},
		"clay.buffers.Float64ArrayImpl": {
			"name": "Float64ArrayImpl",
			"path": "clay.buffers.Float64ArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Float64ArrayImpl.html"
		},
		"clay.buffers.Int16ArrayImpl": {
			"name": "Int16ArrayImpl",
			"path": "clay.buffers.Int16ArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Int16ArrayImpl.html"
		},
		"clay.buffers.Int32ArrayImpl": {
			"name": "Int32ArrayImpl",
			"path": "clay.buffers.Int32ArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Int32ArrayImpl.html"
		},
		"clay.buffers.Int32ArrayImplJS": {
			"name": "Int32ArrayImplJS",
			"path": "clay.buffers.Int32ArrayImplJS",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Int32ArrayImplJS.html"
		},
		"clay.buffers.Int8ArrayImpl": {
			"name": "Int8ArrayImpl",
			"path": "clay.buffers.Int8ArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Int8ArrayImpl.html"
		},
		"clay.buffers.TypedArrayType": {
			"name": "TypedArrayType",
			"path": "clay.buffers.TypedArrayType",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/TypedArrayType.html"
		},
		"clay.buffers.Uint16ArrayImpl": {
			"name": "Uint16ArrayImpl",
			"path": "clay.buffers.Uint16ArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint16ArrayImpl.html"
		},
		"clay.buffers.Uint16ArrayImplJS": {
			"name": "Uint16ArrayImplJS",
			"path": "clay.buffers.Uint16ArrayImplJS",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint16ArrayImplJS.html"
		},
		"clay.buffers.Uint32ArrayImpl": {
			"name": "Uint32ArrayImpl",
			"path": "clay.buffers.Uint32ArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint32ArrayImpl.html"
		},
		"clay.buffers.Uint8ArrayImpl": {
			"name": "Uint8ArrayImpl",
			"path": "clay.buffers.Uint8ArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint8ArrayImpl.html"
		},
		"clay.buffers.Uint8ArrayImplJS": {
			"name": "Uint8ArrayImplJS",
			"path": "clay.buffers.Uint8ArrayImplJS",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint8ArrayImplJS.html"
		},
		"clay.buffers.Uint8ClampedArrayImpl": {
			"name": "Uint8ClampedArrayImpl",
			"path": "clay.buffers.Uint8ClampedArrayImpl",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint8ClampedArrayImpl.html"
		},
		"clay.buffers.TAError": {
			"name": "TAError",
			"path": "clay.buffers.TAError",
			"description": "",
			"type": "enum",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/TAError.html"
		},
		"clay.buffers.ArrayBuffer": {
			"name": "ArrayBuffer",
			"path": "clay.buffers.ArrayBuffer",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/ArrayBuffer.html"
		},
		"clay.buffers.ArrayBufferView": {
			"name": "ArrayBufferView",
			"path": "clay.buffers.ArrayBufferView",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/ArrayBufferView.html"
		},
		"clay.buffers.Float32Array": {
			"name": "Float32Array",
			"path": "clay.buffers.Float32Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Float32Array.html"
		},
		"clay.buffers.Float64Array": {
			"name": "Float64Array",
			"path": "clay.buffers.Float64Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Float64Array.html"
		},
		"clay.buffers.Int16Array": {
			"name": "Int16Array",
			"path": "clay.buffers.Int16Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Int16Array.html"
		},
		"clay.buffers.Int32Array": {
			"name": "Int32Array",
			"path": "clay.buffers.Int32Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Int32Array.html"
		},
		"clay.buffers.Int8Array": {
			"name": "Int8Array",
			"path": "clay.buffers.Int8Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Int8Array.html"
		},
		"clay.buffers.UINT": {
			"name": "UINT",
			"path": "clay.buffers.UINT",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/UINT.html"
		},
		"clay.buffers.Uint16Array": {
			"name": "Uint16Array",
			"path": "clay.buffers.Uint16Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint16Array.html"
		},
		"clay.buffers.Uint32Array": {
			"name": "Uint32Array",
			"path": "clay.buffers.Uint32Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint32Array.html"
		},
		"clay.buffers.Uint8Array": {
			"name": "Uint8Array",
			"path": "clay.buffers.Uint8Array",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint8Array.html"
		},
		"clay.buffers.Uint8ClampedArray": {
			"name": "Uint8ClampedArray",
			"path": "clay.buffers.Uint8ClampedArray",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/buffers/Uint8ClampedArray.html"
		},
		"clay.native.NativeAssets": {
			"name": "NativeAssets",
			"path": "clay.native.NativeAssets",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/NativeAssets.html"
		},
		"clay.native.NativeAudio": {
			"name": "NativeAudio",
			"path": "clay.native.NativeAudio",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/NativeAudio.html"
		},
		"clay.native.NativeAudioDataOGG": {
			"name": "NativeAudioDataOGG",
			"path": "clay.native.NativeAudioDataOGG",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/NativeAudioDataOGG.html"
		},
		"clay.native.NativeAudioDataPCM": {
			"name": "NativeAudioDataPCM",
			"path": "clay.native.NativeAudioDataPCM",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/NativeAudioDataPCM.html"
		},
		"clay.native.NativeAudioDataWAV": {
			"name": "NativeAudioDataWAV",
			"path": "clay.native.NativeAudioDataWAV",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/NativeAudioDataWAV.html"
		},
		"clay.native.NativeIO": {
			"name": "NativeIO",
			"path": "clay.native.NativeIO",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/NativeIO.html"
		},
		"clay.native.OGG": {
			"name": "OGG",
			"path": "clay.native.OGG",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/OGG.html"
		},
		"clay.native.PCM": {
			"name": "PCM",
			"path": "clay.native.PCM",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/PCM.html"
		},
		"clay.native.WAV": {
			"name": "WAV",
			"path": "clay.native.WAV",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/WAV.html"
		},
		"clay.native.WavChunk": {
			"name": "WavChunk",
			"path": "clay.native.WavChunk",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/WavChunk.html"
		},
		"clay.native.WavHandle": {
			"name": "WavHandle",
			"path": "clay.native.WavHandle",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/native/WavHandle.html"
		},
		"clay.web.WebAssets": {
			"name": "WebAssets",
			"path": "clay.web.WebAssets",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/web/WebAssets.html"
		},
		"clay.web.WebAudio": {
			"name": "WebAudio",
			"path": "clay.web.WebAudio",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/web/WebAudio.html"
		},
		"clay.web.WebConfig": {
			"name": "WebConfig",
			"path": "clay.web.WebConfig",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/web/WebConfig.html"
		},
		"clay.web.WebIO": {
			"name": "WebIO",
			"path": "clay.web.WebIO",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/web/WebIO.html"
		},
		"clay.web.WebRuntime": {
			"name": "WebRuntime",
			"path": "clay.web.WebRuntime",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/clay/web/WebRuntime.html"
		},
		"clay.web.WindowHandle": {
			"name": "WindowHandle",
			"path": "clay.web.WindowHandle",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/clay/web/WindowHandle.html"
		},
		"nape.callbacks.BodyCallback": {
			"name": "BodyCallback",
			"path": "nape.callbacks.BodyCallback",
			"description": "Callback object for Body type events.\n\nThis, like all other callback objects are automatically reused\nand you should not keep any reference to them.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/BodyCallback.html"
		},
		"nape.callbacks.BodyListener": {
			"name": "BodyListener",
			"path": "nape.callbacks.BodyListener",
			"description": "Event listener for Body type events.\n\nThe events that can be caught are WAKE and SLEEP type events.\nTheses listeners will only operate on Bodys, not Interactors in general.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/BodyListener.html"
		},
		"nape.callbacks.Callback": {
			"name": "Callback",
			"path": "nape.callbacks.Callback",
			"description": "Base type for Callback event objects.\n\nCallback objects are automatically reused and you should not keep references\nto them.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/Callback.html"
		},
		"nape.callbacks.CbEvent": {
			"name": "CbEvent",
			"path": "nape.callbacks.CbEvent",
			"description": "Enumeration of possible callback event types.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/CbEvent.html"
		},
		"nape.callbacks.CbType": {
			"name": "CbType",
			"path": "nape.callbacks.CbType",
			"description": "Callback Type applied to Interactors and Constraints.\n\nCallback types are ranged over by listeners.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/CbType.html"
		},
		"nape.callbacks.CbTypeIterator": {
			"name": "CbTypeIterator",
			"path": "nape.callbacks.CbTypeIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/CbTypeIterator.html"
		},
		"nape.callbacks.CbTypeList": {
			"name": "CbTypeList",
			"path": "nape.callbacks.CbTypeList",
			"description": "Nape list of CbType type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/CbTypeList.html"
		},
		"nape.callbacks.ConstraintCallback": {
			"name": "ConstraintCallback",
			"path": "nape.callbacks.ConstraintCallback",
			"description": "Callback object for Constraint type events.\n\nThis, like all other callback objects are automatically reused\nand you should not keep any reference to them.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/ConstraintCallback.html"
		},
		"nape.callbacks.ConstraintListener": {
			"name": "ConstraintListener",
			"path": "nape.callbacks.ConstraintListener",
			"description": "Event listener for Constraint type events.\n\nThe events that can be caught are WAKE, SLEEP and BREAK type events.\nTheses listeners will only operate on Constraints.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/ConstraintListener.html"
		},
		"nape.callbacks.InteractionCallback": {
			"name": "InteractionCallback",
			"path": "nape.callbacks.InteractionCallback",
			"description": "Callback object for Interaction type events.\n\nThis, like all other callback objects are automatically reused\nand you should not keep any reference to them.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/InteractionCallback.html"
		},
		"nape.callbacks.InteractionListener": {
			"name": "InteractionListener",
			"path": "nape.callbacks.InteractionListener",
			"description": "Event listener for Interaction type events.\n\nInteraction type events can occur between any two Interactors (whether they\nbe Shapes, Bodys, Compounds or a mix thereof).\n\nThe events that can be caught are BEGIN, ONGOING, and END type events.\nTheses listeners will operate between pairs of Interactors.\n<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/InteractionListener.html"
		},
		"nape.callbacks.InteractionType": {
			"name": "InteractionType",
			"path": "nape.callbacks.InteractionType",
			"description": "Enumeration of Interaction types.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/InteractionType.html"
		},
		"nape.callbacks.Listener": {
			"name": "Listener",
			"path": "nape.callbacks.Listener",
			"description": "Base type for all Nape callback listeners.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/Listener.html"
		},
		"nape.callbacks.ListenerIterator": {
			"name": "ListenerIterator",
			"path": "nape.callbacks.ListenerIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/ListenerIterator.html"
		},
		"nape.callbacks.ListenerList": {
			"name": "ListenerList",
			"path": "nape.callbacks.ListenerList",
			"description": "Nape list of Listener type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/ListenerList.html"
		},
		"nape.callbacks.ListenerType": {
			"name": "ListenerType",
			"path": "nape.callbacks.ListenerType",
			"description": "Enumeration of Listener types.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/ListenerType.html"
		},
		"nape.callbacks.OptionType": {
			"name": "OptionType",
			"path": "nape.callbacks.OptionType",
			"description": "OptionType representing matching behaviour for Listeners.\n\nAn object's set of CbType's 'matches' against an OptionType iff.\nthe OptionType's includes list intersects the object's set of CbTypes\nand the OptionType's excludes list 'does not' intersect the object's set\nof CbTypes.\noption = new OptionType([A, B], [C, D]);\nobj.cbTypes = [] // =&gt; does not match option.\nobj.cbTypes = [A] // =&gt; matches the option\nobj.cbTypes = [A, C] // =&gt; does not match option.\n\nThe optionType's includes and excludes list are managed to be always\ndisjoint: The action of including an already excluded type serves to\nremove it from the excludes list, equalliy excluding an already included\ntype serves to remove it from the includes list.\nvar option = new OptionType();\noption.including(A); // option = {[A]:[]}\noption.excluding(A); // option = {[]:[]}\noption.excluding(A); // option = {[]:[A]}\noption.including(A); // option = {[A]:[]}\n",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/OptionType.html"
		},
		"nape.callbacks.PreCallback": {
			"name": "PreCallback",
			"path": "nape.callbacks.PreCallback",
			"description": "Callback object for Pre-Interaction type events.\n\nThis, like all other callback objects are automatically reused\nand you should not keep any reference to them.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/PreCallback.html"
		},
		"nape.callbacks.PreFlag": {
			"name": "PreFlag",
			"path": "nape.callbacks.PreFlag",
			"description": "Enumeration of interaction states for arbiters. These values are returned\nby PreListener callback handlers.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/PreFlag.html"
		},
		"nape.callbacks.PreListener": {
			"name": "PreListener",
			"path": "nape.callbacks.PreListener",
			"description": "Event listener for Pre-Interaction type events.\n\nPre-Interaction type events can occur between any two Interactors (whether they\nbe Shapes, Bodys, Compounds or a mix thereof).",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/callbacks/PreListener.html"
		},
		"nape.constraint.AngleJoint": {
			"name": "AngleJoint",
			"path": "nape.constraint.AngleJoint",
			"description": "AngleJoint constraining the relative angles of two Bodies.\n\nThe equation for this constraint is:\njointMin &lt;= ratio * body2.rotation - body1.rotation &lt;= jointMax\n",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/AngleJoint.html"
		},
		"nape.constraint.Constraint": {
			"name": "Constraint",
			"path": "nape.constraint.Constraint",
			"description": "Base type for all Nape joints and constraints",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/Constraint.html"
		},
		"nape.constraint.ConstraintIterator": {
			"name": "ConstraintIterator",
			"path": "nape.constraint.ConstraintIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/ConstraintIterator.html"
		},
		"nape.constraint.ConstraintList": {
			"name": "ConstraintList",
			"path": "nape.constraint.ConstraintList",
			"description": "Nape list of Constraint type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/ConstraintList.html"
		},
		"nape.constraint.DistanceJoint": {
			"name": "DistanceJoint",
			"path": "nape.constraint.DistanceJoint",
			"description": "DistanceJoint limiting the distance between two local anchor points of Bodies.\n\nThe equation for this constraint could be written like:\njointMin &lt;= distance(body2.localPointToWorld(anchor2), body1.localPointToWorld(anchor1)) &lt;= jointMax\n\nThis joint is not designed to work when  jointMin = jointMax = 0  and constraint is\nstiff. In this instance you should use a PivotJoint instead.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/DistanceJoint.html"
		},
		"nape.constraint.LineJoint": {
			"name": "LineJoint",
			"path": "nape.constraint.LineJoint",
			"description": "LineJoint constraining anchor of one body, to a line segment of the other.\n\nThe equation for this constraint could be written like:\n<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/LineJoint.html"
		},
		"nape.constraint.MotorJoint": {
			"name": "MotorJoint",
			"path": "nape.constraint.MotorJoint",
			"description": "MotorJoint constraining the angular velocities of two bodies\n\nThe equation for this constraint is:\n(ratio * body2.angularVel) - body1.angularVel = rate\n\nThis constraint operates only on the velocities of objects.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/MotorJoint.html"
		},
		"nape.constraint.PivotJoint": {
			"name": "PivotJoint",
			"path": "nape.constraint.PivotJoint",
			"description": "PivotJoint constraining two anchors points of bodies to be equal.\n\nThe equation for this constraint is:\nbody2.localPointToWorld(anchor2) = body1.localPointToWorld(anchor1)\n\nYou may view this constraint as being equal to the DistanceJoint constraint\nwhen both its jointMin and jointMax are exactly 0 (In such a case a\nDistanceJoint becomes degenerate). Compared to the DistanceJoint this is\na 2 dimensional constraint.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/PivotJoint.html"
		},
		"nape.constraint.PulleyJoint": {
			"name": "PulleyJoint",
			"path": "nape.constraint.PulleyJoint",
			"description": "PulleyJoint limiting the weighted sum of distances between 2 pairs of 4 local anchor points of Bodies.\n\nThe equation for this constraint could be written like:\njointMin &lt;= distance(body2.localPointToWorld(anchor2), body1.localPointToWorld(anchor1))\n+ ratio * distance(body4.localPointToWorld(anchor4), body3.localPointToWorld(anchor3)) &lt;= jointMax\n\nThis joint is not designed to work when either of these pairs achieves a distance of 0, it will still work\nbut may not be entirely ideal.\n!1* * This constraint can be used in a full 4-body set up, or a 3-body set up or a 2-body set up permitting\nany arrangement as long as body1 != body2 and body3 != body4",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/PulleyJoint.html"
		},
		"nape.constraint.UserConstraint": {
			"name": "UserConstraint",
			"path": "nape.constraint.UserConstraint",
			"description": "UserConstraint providing a low-level API for user-defined Constraints.\n\nThis API is intended to be powerful enough to model any constraint that\nNape can handle, but not so low level as to be completely prohibitive.\n\nFor instance, things like soft-constraints are automatically provided\nby this API.\n\nWorking with this API will require mathematical skills. A full manual\nfor this API is provided at: http://napephys.com/help/Constraints.pdf\n\nYou may also be interested in the nape-symbolic module that is available\non github/haxelib/nape downloads. Which provides a run-time compiled DSL\nusing this API to make prototyping (or creating non-performance critical)\nuser-defined constraints simple without the need for great mathematical\nskills as well as being much quicker to work with.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/UserConstraint.html"
		},
		"nape.constraint.WeldJoint": {
			"name": "WeldJoint",
			"path": "nape.constraint.WeldJoint",
			"description": "WeldJoint constraining two bodies to be exactly locked together.\n\nThe equation for this constraint is:\n[ body2.localPointToWorld(anchor2) ] = [ body1.localPointToWorld(anchor1) ]\n[          body2.rotation          ]   [      body1.rotation + phase      ]\n\nThis constraint is equivalent to using a PivotJoint and AngleJoint\ntogether except that it is solved as a single constraint and thus\nwill be more stable.\n\nThis constraint is 3 dimensional.\n\nAlthough this constraint is very stable, if you chain bodies together\nusing this constraint, you should except to see a small amount of rotation\nabout the anchor points so you should chose them accordingly.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/constraint/WeldJoint.html"
		},
		"nape.geom.AABB": {
			"name": "AABB",
			"path": "nape.geom.AABB",
			"description": "Axis Aligned Bounding Box (AABB)\n\nNote that in many cases of an AABB object being returned by a Nape function\nthe AABB object will be marked internally as an 'immutable' AABB. This will\nalways be documented and trying to mutate such an AABB will result in an\nerror being thrown.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/AABB.html"
		},
		"nape.geom.ConvexResult": {
			"name": "ConvexResult",
			"path": "nape.geom.ConvexResult",
			"description": "Class representing the results of a convex cast operation.\n\nThese objects are allocated from an object pool and can\nbe released back to that pool by calling its dispose method.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/ConvexResult.html"
		},
		"nape.geom.ConvexResultIterator": {
			"name": "ConvexResultIterator",
			"path": "nape.geom.ConvexResultIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/ConvexResultIterator.html"
		},
		"nape.geom.ConvexResultList": {
			"name": "ConvexResultList",
			"path": "nape.geom.ConvexResultList",
			"description": "Nape list of ConvexResult type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/ConvexResultList.html"
		},
		"nape.geom.Geom": {
			"name": "Geom",
			"path": "nape.geom.Geom",
			"description": "Geom class provides interface to collision detection routines in nape.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/Geom.html"
		},
		"nape.geom.GeomPoly": {
			"name": "GeomPoly",
			"path": "nape.geom.GeomPoly",
			"description": "Polygon class with various geometric methods\n\nThis class represents a general Polygon, rather than the Polygon class\nwhich is physics shape.\n\nInternally this polygon is stored as a circularly linked list of special\nvertex types that are exposed via a Vec2 that is lazily constructed whenever\nnecessary to the API.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/GeomPoly.html"
		},
		"nape.geom.GeomPolyIterator": {
			"name": "GeomPolyIterator",
			"path": "nape.geom.GeomPolyIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/GeomPolyIterator.html"
		},
		"nape.geom.GeomPolyList": {
			"name": "GeomPolyList",
			"path": "nape.geom.GeomPolyList",
			"description": "Nape list of GeomPoly type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/GeomPolyList.html"
		},
		"nape.geom.GeomVertexIterator": {
			"name": "GeomVertexIterator",
			"path": "nape.geom.GeomVertexIterator",
			"description": "Haxe compatible iterator over vertices of GeomPoly.\n\nVec2's intrinsically tied to the vertices are exposed through\nthe iterator which does not modify the state of the polygon.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/GeomVertexIterator.html"
		},
		"nape.geom.MarchingSquares": {
			"name": "MarchingSquares",
			"path": "nape.geom.MarchingSquares",
			"description": "Iso-surface extraction into polygons.\n\nThis class, with only one static method provides an interface to\nan algorithm which will, when given a function mapping each point\nin a given AABB to a scalar value extract approximated polygons\nwhich represent the region of the AABB where the function returns\na negative value.\n\nThis function could be a mathematical function like the equation of\na circle:  function (x, y) return (xx + yy) - r*r \n\nOr something more practical like the biased alpha value interpolated\nfrom a Bitmap:\nfunction (x, y) {\nvar ix = if (x &lt; 0) 0 else if (x &gt;= bitmap.width - 1) bitmap.width - 2 else Std.int(x);\nvar iy = if (y &lt; 0) 0 else if (y &gt;= bitmap.height - 1) bitmap.height - 2 else Std.int(y);\nvar fx = x - ix;\nvar fy = y - iy;\nvar gx = 1 - fx;\nvar gy = 1 - fy;<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/MarchingSquares.html"
		},
		"nape.geom.Mat23": {
			"name": "Mat23",
			"path": "nape.geom.Mat23",
			"description": "2D Matrix class representing affine transformations:\n[ a  b  tx ]\n[ c  d  ty ]\n[ 0  0  1  ]\n",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/Mat23.html"
		},
		"nape.geom.MatMN": {
			"name": "MatMN",
			"path": "nape.geom.MatMN",
			"description": "A general MxN dimensional matrix.\n\nThis object is not often used in Nape :)",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/MatMN.html"
		},
		"nape.geom.Ray": {
			"name": "Ray",
			"path": "nape.geom.Ray",
			"description": "Parametrically defined ray used in ray casting functions.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/Ray.html"
		},
		"nape.geom.RayResult": {
			"name": "RayResult",
			"path": "nape.geom.RayResult",
			"description": "Class representing the results of a ray cast operation.\n\nThese objects are allocated from an object pool and can\nbe released back to that pool by calling its dispose method.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/RayResult.html"
		},
		"nape.geom.RayResultIterator": {
			"name": "RayResultIterator",
			"path": "nape.geom.RayResultIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/RayResultIterator.html"
		},
		"nape.geom.RayResultList": {
			"name": "RayResultList",
			"path": "nape.geom.RayResultList",
			"description": "Nape list of RayResult type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/RayResultList.html"
		},
		"nape.geom.Vec2": {
			"name": "Vec2",
			"path": "nape.geom.Vec2",
			"description": "2 Dimensional vector.\n\nNote that in many cases of a Vec2 object being returned by a Nape function\nthe Vec2 object will be marked internally as an 'immutable' Vec2. This will\nalways be documented and trying to mutate such a Vec2 will result in an\nerror being thrown.\n\nVec2 objects can make use of a global object pool, attempting to make use\nof a disposed Vec2 will also result in an error with the object pool\nworking in a FILO order to increase the likelihood of such misuse being\ncaught.\n\nAdditionally Vec2 objects can be created as 'weak'. Passing a weak Vec2 to\nany Nape function as an argument will result in the automatic disposal of\nthe Vec2 once the method has finished with it. There may be exceptions to\nthis rule which will also be documented; a notable case being the appending\nof a weak Vec2 to a Nape Vec2List in which case the disposal of the weak\nVec2 is performed when that Vec2List is handed to a Nape function instead.\n\nExample:\nvar vertices = Polygon.box(20, 20, true);\nvar polygon = new Polygon(vertices);\n\nIn this example, passing true to the Polygon.box method means\nthat we will be returned a Vec2List containing only 'weak' Vec2s. Upon\npassing this Vec2List to the Polygon constructor, all of the Vec2s from\nthat list will be automatically disposed.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/Vec2.html"
		},
		"nape.geom.Vec2Iterator": {
			"name": "Vec2Iterator",
			"path": "nape.geom.Vec2Iterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/Vec2Iterator.html"
		},
		"nape.geom.Vec2List": {
			"name": "Vec2List",
			"path": "nape.geom.Vec2List",
			"description": "Nape list of Vec2 type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/Vec2List.html"
		},
		"nape.geom.Vec3": {
			"name": "Vec3",
			"path": "nape.geom.Vec3",
			"description": "A 3 dimensional vector object.\n\nIn many instances a Vec3 will be accessible from Nape which is marked\nas immutable, these cases will be documented and modifying such a Vec3\nwill result in an error.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/Vec3.html"
		},
		"nape.geom.Winding": {
			"name": "Winding",
			"path": "nape.geom.Winding",
			"description": "Enumeration represents the winding of a Polygon.\n\nTo appreciate what the winding of a polygon means, think of a polygon who's\nvertices are the numbers on a clock face.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/Winding.html"
		},
		"nape.geom.IsoFunctionDef": {
			"name": "IsoFunctionDef",
			"path": "nape.geom.IsoFunctionDef",
			"description": "For 'flash' targets only.\n\nIso-functions for MarchingSquares must be given\nas an object implementing this IsoFunction interface. This is for\nreasons of avoiding excessive memory allocations that occur through\nautomatic boxing of arguments/return values when using function values.\n\nSince iso-functions may be called 10,000's of times per-invocation of\nmarching-squares, this can quickly accumulate into a lot of GC activity.",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/nape/geom/IsoFunctionDef.html"
		},
		"nape.phys.Body": {
			"name": "Body",
			"path": "nape.phys.Body",
			"description": "Class representing a physics Rigid Body.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/Body.html"
		},
		"nape.phys.BodyIterator": {
			"name": "BodyIterator",
			"path": "nape.phys.BodyIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/BodyIterator.html"
		},
		"nape.phys.BodyList": {
			"name": "BodyList",
			"path": "nape.phys.BodyList",
			"description": "Nape list of Body type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/BodyList.html"
		},
		"nape.phys.BodyType": {
			"name": "BodyType",
			"path": "nape.phys.BodyType",
			"description": "Enumeration of rigid body types.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/BodyType.html"
		},
		"nape.phys.Compound": {
			"name": "Compound",
			"path": "nape.phys.Compound",
			"description": "Compound represents a grouping of physics objects into a single object.\n\nThis compound owns its constituents and works in the callback system and with\nrespect to adding/removing from a Space as a single object.\n<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/Compound.html"
		},
		"nape.phys.CompoundIterator": {
			"name": "CompoundIterator",
			"path": "nape.phys.CompoundIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/CompoundIterator.html"
		},
		"nape.phys.CompoundList": {
			"name": "CompoundList",
			"path": "nape.phys.CompoundList",
			"description": "Nape list of Compound type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/CompoundList.html"
		},
		"nape.phys.FluidProperties": {
			"name": "FluidProperties",
			"path": "nape.phys.FluidProperties",
			"description": "FluidProperties providing shared parameters for fluid interaction.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/FluidProperties.html"
		},
		"nape.phys.GravMassMode": {
			"name": "GravMassMode",
			"path": "nape.phys.GravMassMode",
			"description": "Enumeration of GravMassMode values for a Body.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/GravMassMode.html"
		},
		"nape.phys.InertiaMode": {
			"name": "InertiaMode",
			"path": "nape.phys.InertiaMode",
			"description": "Enumeration of InertiaMode values for a Body.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/InertiaMode.html"
		},
		"nape.phys.Interactor": {
			"name": "Interactor",
			"path": "nape.phys.Interactor",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/Interactor.html"
		},
		"nape.phys.InteractorIterator": {
			"name": "InteractorIterator",
			"path": "nape.phys.InteractorIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/InteractorIterator.html"
		},
		"nape.phys.InteractorList": {
			"name": "InteractorList",
			"path": "nape.phys.InteractorList",
			"description": "Nape list of Interactor type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/InteractorList.html"
		},
		"nape.phys.MassMode": {
			"name": "MassMode",
			"path": "nape.phys.MassMode",
			"description": "Enumeration of MassMode values for a Body.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/MassMode.html"
		},
		"nape.phys.Material": {
			"name": "Material",
			"path": "nape.phys.Material",
			"description": "Material property providing physical attributes to a Shape.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/phys/Material.html"
		},
		"nape.shape.Circle": {
			"name": "Circle",
			"path": "nape.shape.Circle",
			"description": "Shape subtype representing a Circle",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/Circle.html"
		},
		"nape.shape.Edge": {
			"name": "Edge",
			"path": "nape.shape.Edge",
			"description": "Edge class providing internal details of Polygon.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/Edge.html"
		},
		"nape.shape.EdgeIterator": {
			"name": "EdgeIterator",
			"path": "nape.shape.EdgeIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/EdgeIterator.html"
		},
		"nape.shape.EdgeList": {
			"name": "EdgeList",
			"path": "nape.shape.EdgeList",
			"description": "Nape list of Edge type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/EdgeList.html"
		},
		"nape.shape.Polygon": {
			"name": "Polygon",
			"path": "nape.shape.Polygon",
			"description": "Polygon subtype of Shape.\n\nCan be used to simulate any convex polygon.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/Polygon.html"
		},
		"nape.shape.Shape": {
			"name": "Shape",
			"path": "nape.shape.Shape",
			"description": "Base type for Nape Shape's",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/Shape.html"
		},
		"nape.shape.ShapeIterator": {
			"name": "ShapeIterator",
			"path": "nape.shape.ShapeIterator",
			"description": "Haxe Iterator compatible iterator over Nape list.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/ShapeIterator.html"
		},
		"nape.shape.ShapeList": {
			"name": "ShapeList",
			"path": "nape.shape.ShapeList",
			"description": "Nape list of Shape type objects\n\nInternally this list is at present implemented as a linked list with\nobject pooled nodes and iterators with various fast paths made for\nstandard access patterns (For instance accessing successive elements\nruns in constant time when using random access functions)\n\nIteration of this list can be done in various ways, but the preferred\nway on all targets, is through use of the foreach function:\nlist.foreach(function (obj) {\n});\n\nThis method is inlined so that in haxe no closure will need to be created.\n\nIn AS3, a closure would need to be created in general, so for performance\nreasons you 'may' choose to use iteration as follows:\nfor (var i:int = 0; i &lt; list.length; i++) {<p></p>",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/ShapeList.html"
		},
		"nape.shape.ShapeType": {
			"name": "ShapeType",
			"path": "nape.shape.ShapeType",
			"description": "Enumeration of Nape Shape types.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/ShapeType.html"
		},
		"nape.shape.ValidationResult": {
			"name": "ValidationResult",
			"path": "nape.shape.ValidationResult",
			"description": "Enumeration of validation results for a Polygon.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/shape/ValidationResult.html"
		},
		"nape.space.Broadphase": {
			"name": "Broadphase",
			"path": "nape.space.Broadphase",
			"description": "Enumeration of available broadphase collision types that Spaces may use.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/space/Broadphase.html"
		},
		"nape.space.Space": {
			"name": "Space",
			"path": "nape.space.Space",
			"description": "The heart of all Nape simulations.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/space/Space.html"
		},
		"nape.util.Debug": {
			"name": "Debug",
			"path": "nape.util.Debug",
			"description": "Debug class providing general utilities\n\nAlso serves as the base type for Debug draws.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/nape/util/Debug.html"
		},
		"spine.attachments.AtlasAttachmentLoader": {
			"name": "AtlasAttachmentLoader",
			"path": "spine.attachments.AtlasAttachmentLoader",
			"description": "An {@link AttachmentLoader} that configures attachments using texture regions from an {@link Atlas}.\n\nSee Loading skeleton data in the\nSpine Runtimes Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/AtlasAttachmentLoader.html"
		},
		"spine.attachments.Attachment": {
			"name": "Attachment",
			"path": "spine.attachments.Attachment",
			"description": "The base class for all attachments.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/Attachment.html"
		},
		"spine.attachments.AttachmentLoader": {
			"name": "AttachmentLoader",
			"path": "spine.attachments.AttachmentLoader",
			"description": "The interface which can be implemented to customize creating and populating attachments.\n\nSee Loading skeleton data in the Spine\nRuntimes Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/AttachmentLoader.html"
		},
		"spine.attachments.AttachmentType_enum": {
			"name": "AttachmentType_enum",
			"path": "spine.attachments.AttachmentType_enum",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/AttachmentType_enum.html"
		},
		"spine.attachments.BoundingBoxAttachment": {
			"name": "BoundingBoxAttachment",
			"path": "spine.attachments.BoundingBoxAttachment",
			"description": "An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\neffects, and more.\n\nSee {@link SkeletonBounds} and Bounding Boxes in the Spine User\nGuide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/BoundingBoxAttachment.html"
		},
		"spine.attachments.ClippingAttachment": {
			"name": "ClippingAttachment",
			"path": "spine.attachments.ClippingAttachment",
			"description": "An attachment with vertices that make up a polygon used for clipping the rendering of other attachments.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/ClippingAttachment.html"
		},
		"spine.attachments.MeshAttachment": {
			"name": "MeshAttachment",
			"path": "spine.attachments.MeshAttachment",
			"description": "An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\nsupported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.\n\nSee Mesh attachments in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/MeshAttachment.html"
		},
		"spine.attachments.PathAttachment": {
			"name": "PathAttachment",
			"path": "spine.attachments.PathAttachment",
			"description": "An attachment whose vertices make up a composite Bezier curve.\n\nSee {@link PathConstraint} and Paths in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/PathAttachment.html"
		},
		"spine.attachments.PointAttachment": {
			"name": "PointAttachment",
			"path": "spine.attachments.PointAttachment",
			"description": "An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\nused in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\nskin.\n\nSee Point Attachments in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/PointAttachment.html"
		},
		"spine.attachments.RegionAttachment": {
			"name": "RegionAttachment",
			"path": "spine.attachments.RegionAttachment",
			"description": "An attachment that displays a textured quadrilateral.\n\nSee Region attachments in the Spine User Guide.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/RegionAttachment.html"
		},
		"spine.attachments.VertexAttachment": {
			"name": "VertexAttachment",
			"path": "spine.attachments.VertexAttachment",
			"description": "Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n{@link Slot#getDeform()}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/VertexAttachment.html"
		},
		"spine.attachments.AttachmentType": {
			"name": "AttachmentType",
			"path": "spine.attachments.AttachmentType",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/attachments/AttachmentType.html"
		},
		"spine.utils.SkeletonClipping": {
			"name": "SkeletonClipping",
			"path": "spine.utils.SkeletonClipping",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/utils/SkeletonClipping.html"
		},
		"spine.utils.SpineUtils": {
			"name": "SpineUtils",
			"path": "spine.utils.SpineUtils",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/utils/SpineUtils.html"
		},
		"spine.utils.Triangulator": {
			"name": "Triangulator",
			"path": "spine.utils.Triangulator",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/utils/Triangulator.html"
		},
		"spine.support.error.Error": {
			"name": "Error",
			"path": "spine.support.error.Error",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/error/Error.html"
		},
		"spine.support.error.IllegalArgumentException": {
			"name": "IllegalArgumentException",
			"path": "spine.support.error.IllegalArgumentException",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/error/IllegalArgumentException.html"
		},
		"spine.support.error.IllegalStateException": {
			"name": "IllegalStateException",
			"path": "spine.support.error.IllegalStateException",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/error/IllegalStateException.html"
		},
		"spine.support.error.RuntimeException": {
			"name": "RuntimeException",
			"path": "spine.support.error.RuntimeException",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/error/RuntimeException.html"
		},
		"spine.support.extensions.ArrayExtensions": {
			"name": "ArrayExtensions",
			"path": "spine.support.extensions.ArrayExtensions",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/extensions/ArrayExtensions.html"
		},
		"spine.support.extensions.FileExtensions": {
			"name": "FileExtensions",
			"path": "spine.support.extensions.FileExtensions",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/extensions/FileExtensions.html"
		},
		"spine.support.extensions.SpineExtensions": {
			"name": "SpineExtensions",
			"path": "spine.support.extensions.SpineExtensions",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/extensions/SpineExtensions.html"
		},
		"spine.support.extensions.StringExtensions": {
			"name": "StringExtensions",
			"path": "spine.support.extensions.StringExtensions",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/extensions/StringExtensions.html"
		},
		"spine.support.files.FileHandle": {
			"name": "FileHandle",
			"path": "spine.support.files.FileHandle",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/files/FileHandle.html"
		},
		"spine.support.math.MathUtils": {
			"name": "MathUtils",
			"path": "spine.support.math.MathUtils",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/math/MathUtils.html"
		},
		"spine.support.math.Matrix3": {
			"name": "Matrix3",
			"path": "spine.support.math.Matrix3",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/math/Matrix3.html"
		},
		"spine.support.math.Vector2": {
			"name": "Vector2",
			"path": "spine.support.math.Vector2",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/math/Vector2.html"
		},
		"spine.support.utils.AttachmentSetEntry": {
			"name": "AttachmentSetEntry",
			"path": "spine.support.utils.AttachmentSetEntry",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/AttachmentSetEntry.html"
		},
		"spine.support.utils.FastCast": {
			"name": "FastCast",
			"path": "spine.support.utils.FastCast",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/FastCast.html"
		},
		"spine.support.utils.JsonChild": {
			"name": "JsonChild",
			"path": "spine.support.utils.JsonChild",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/JsonChild.html"
		},
		"spine.support.utils.JsonDynamic": {
			"name": "JsonDynamic",
			"path": "spine.support.utils.JsonDynamic",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/JsonDynamic.html"
		},
		"spine.support.utils.JsonReader": {
			"name": "JsonReader",
			"path": "spine.support.utils.JsonReader",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/JsonReader.html"
		},
		"spine.support.utils.JsonValue": {
			"name": "JsonValue",
			"path": "spine.support.utils.JsonValue",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/JsonValue.html"
		},
		"spine.support.utils.Pool": {
			"name": "Pool",
			"path": "spine.support.utils.Pool",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/Pool.html"
		},
		"spine.support.utils.Poolable": {
			"name": "Poolable",
			"path": "spine.support.utils.Poolable",
			"description": "Objects implementing this interface will have {@link #reset()} called when passed to {@link Pool#free(Object)}.",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/Poolable.html"
		},
		"spine.support.utils.SerializationException": {
			"name": "SerializationException",
			"path": "spine.support.utils.SerializationException",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/SerializationException.html"
		},
		"spine.support.utils.SnapshotArray": {
			"name": "SnapshotArray",
			"path": "spine.support.utils.SnapshotArray",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/SnapshotArray.html"
		},
		"spine.support.utils.StdEx": {
			"name": "StdEx",
			"path": "spine.support.utils.StdEx",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/StdEx.html"
		},
		"spine.support.utils.AnimationStateMap": {
			"name": "AnimationStateMap",
			"path": "spine.support.utils.AnimationStateMap",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/AnimationStateMap.html"
		},
		"spine.support.utils.Array": {
			"name": "Array",
			"path": "spine.support.utils.Array",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/Array.html"
		},
		"spine.support.utils.AttachmentSet": {
			"name": "AttachmentSet",
			"path": "spine.support.utils.AttachmentSet",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/AttachmentSet.html"
		},
		"spine.support.utils.BooleanArray": {
			"name": "BooleanArray",
			"path": "spine.support.utils.BooleanArray",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/BooleanArray.html"
		},
		"spine.support.utils.Either": {
			"name": "Either",
			"path": "spine.support.utils.Either",
			"description": "Useful to limit a Dynamic function argument's type to the specified\ntype parameters. This does NOT make the use of Dynamic type-safe in\nany way (the underlying type is still Dynamic and Std.isOfType() checks +\ncasts are necessary).",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/Either.html"
		},
		"spine.support.utils.FloatArray": {
			"name": "FloatArray",
			"path": "spine.support.utils.FloatArray",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/FloatArray.html"
		},
		"spine.support.utils.IntArray": {
			"name": "IntArray",
			"path": "spine.support.utils.IntArray",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/IntArray.html"
		},
		"spine.support.utils.ObjectSet": {
			"name": "ObjectSet",
			"path": "spine.support.utils.ObjectSet",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/ObjectSet.html"
		},
		"spine.support.utils.StringBuilder": {
			"name": "StringBuilder",
			"path": "spine.support.utils.StringBuilder",
			"description": "",
			"type": "abstract",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/StringBuilder.html"
		},
		"spine.support.utils.FloatArray2D": {
			"name": "FloatArray2D",
			"path": "spine.support.utils.FloatArray2D",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/FloatArray2D.html"
		},
		"spine.support.utils.IntArray2D": {
			"name": "IntArray2D",
			"path": "spine.support.utils.IntArray2D",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/IntArray2D.html"
		},
		"spine.support.utils.Short": {
			"name": "Short",
			"path": "spine.support.utils.Short",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/Short.html"
		},
		"spine.support.utils.ShortArray": {
			"name": "ShortArray",
			"path": "spine.support.utils.ShortArray",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/ShortArray.html"
		},
		"spine.support.utils.ShortArray2D": {
			"name": "ShortArray2D",
			"path": "spine.support.utils.ShortArray2D",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/ShortArray2D.html"
		},
		"spine.support.utils.StringArray": {
			"name": "StringArray",
			"path": "spine.support.utils.StringArray",
			"description": "",
			"type": "type",
			"link": "https://ceramic-engine.com/api-docs/spine/support/utils/StringArray.html"
		},
		"Main": {
			"name": "Main",
			"path": "Main",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/Main.html"
		},
		"Project": {
			"name": "Project",
			"path": "Project",
			"description": "",
			"type": "class",
			"link": "https://ceramic-engine.com/api-docs/Project.html"
		}
	}
}